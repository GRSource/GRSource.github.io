(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{428:function(e,a,r){e.exports=r.p+"assets/img/category.9aa74744.png"},429:function(e,a,r){e.exports=r.p+"assets/img/copy关键字.a12719e4.png"},557:function(e,a,r){"use strict";r.r(a);var v=r(65),t=Object(v.a)({},(function(){var e=this,a=e.$createElement,v=e._self._c||a;return v("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[v("h1",{attrs:{id:"objective-c"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#objective-c"}},[e._v("#")]),e._v(" Objective-C")]),e._v(" "),v("h2",{attrs:{id:"一、分类的数据结构"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#一、分类的数据结构"}},[e._v("#")]),e._v(" 一、分类的数据结构")]),e._v(" "),v("p",[v("img",{attrs:{src:r(428),alt:"category_t"}}),v("br"),e._v("\nname表示分类的名称；cls表示分类所属的宿主类；")]),e._v(" "),v("p",[e._v("什么是多态？"),v("br"),e._v("\n同一操作作用于不同的对象，可以产生不同的效果。父类指针指向子类对象。")]),e._v(" "),v("h2",{attrs:{id:"二、分类"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#二、分类"}},[e._v("#")]),e._v(" 二、分类")]),e._v(" "),v("p",[e._v("问1：你用分类都做了那些事？"),v("br"),e._v("\n1.声明私有方法，可以在其他类的.m文件中添加分类。"),v("br"),e._v("\n2.分解体积庞大的类文件，根据功能对类当中的方法进行分类"),v("br"),e._v("\n3.把framework的私有方法公开化"),v("br"),e._v("\n问2：分类的特点？"),v("br"),e._v("\n1.运行时决议，编好分类文件后，并没有把分类当中的内容附加到原类上面，实际上原类还没有分类中对应的方法，而是在运行时通过runtime把分类中的内容真实的添加到对应的原类上面，不同分类当中含有同名分类方法，谁最终生效取决于谁最后编译，最后编译的分类方法会最终生效，假如说分类当中的某个方法恰好是宿主类当中的某个方法，分类方法会覆盖同名的宿主类方法，这里所说的覆盖只是由于消息传递优先查找数组靠前的元素，如果找到同名方法就进行调用，但是宿主类中的同名方法还是存在的。这是分类和扩展最大的区别"),v("br"),e._v("\n2.可以为系统类添加分类"),v("br"),e._v("\n问3：分类可以添加哪些内容？"),v("br"),e._v("\n1.实例方法"),v("br"),e._v("\n2.类方法"),v("br"),e._v("\n3.协议"),v("br"),e._v("\n4.属性，实际上只是声明了setter和getter方法，并没有添加成员变量"),v("br"),e._v("\n问5：分类的加载调用栈\n_objc_init -> map_2_images -> map_images_nolock -> _read_images -> remethodizeClass")]),e._v(" "),v("h2",{attrs:{id:"三、关联对象"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#三、关联对象"}},[e._v("#")]),e._v(" 三、关联对象")]),e._v(" "),v("p",[e._v("问1：能否给分类添加“成员变量”？\nid objc_getAssociatedObject(id object, consst void * key)"),v("br"),e._v("\nvoid objc_setAssociatedObject(id object, const void * key, id value, objc_associationPolicy policy)\nvoid objc_removeAssociatedObjects(id object)")]),e._v(" "),v("p",[e._v("问2：成员变量被添加到哪里了？"),v("br"),e._v("\n并没有被添加原宿主类上面，关联对象是由AssociationsManager并在AssociationsHashMap存储，所有类的关联对象都在同一个全局容器中。")]),e._v(" "),v("h2",{attrs:{id:"四、扩展"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#四、扩展"}},[e._v("#")]),e._v(" 四、扩展")]),e._v(" "),v("p",[e._v("问1：扩展的的作用？\n1.声明私有属性"),v("br"),e._v("\n2.声明私有方法"),v("br"),e._v("\n3.声明私有成员变量")]),e._v(" "),v("p",[e._v("问2：扩展的特点？"),v("br"),e._v("\n1.编译时决议"),v("br"),e._v("\n2.只以声明的形式存在，多数情况下寄生在宿主类的.m中"),v("br"),e._v("\n3.不能为系统类添加扩展")]),e._v(" "),v("p",[e._v("问3：分类跟扩展的区别？\n1.分类是运行时决议，扩展是编译时决议"),v("br"),e._v("\n2.分类有声明和实现，而扩展只有声明，它的实现是写在宿主类当中"),v("br"),e._v("\n3.可以为系统类添加分类，而不能添加扩展")]),e._v(" "),v("h2",{attrs:{id:"五、代理"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#五、代理"}},[e._v("#")]),e._v(" 五、代理")]),e._v(" "),v("p",[e._v("问1：什么是代理？\n代理是一种软件设计模式，以@protocol的形式存在，代理的传递方式是一对一")]),e._v(" "),v("h2",{attrs:{id:"六、通知"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#六、通知"}},[e._v("#")]),e._v(" 六、通知")]),e._v(" "),v("p",[e._v("问1：通知的实现原理？\n是使用观察者模式来实现的用于跨层传递消息的机制。传递方式为一对多"),v("br"),e._v("\n问2：如何实现通知机制？\nNSNotificationCenter当中维护着一张map表，通过向map表注册key和多个Observer，来实现通知的观察机制。")]),e._v(" "),v("h2",{attrs:{id:"七、kvo"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#七、kvo"}},[e._v("#")]),e._v(" 七、KVO")]),e._v(" "),v("p",[e._v("问1：KVO的实现机制？"),v("br"),e._v("\nKVO是系统对观察者模式的一种实现，使用了isa混写来实现KVO。"),v("br"),e._v("\n问2：什么是isa混写技术？"),v("br"),e._v("\n当我们注册一个观察者时，调用addObserverForKeyPath之后，观察者观察对象A当中的某个属性，此时系统为我们在运行时创建一个NSKVONotifying_A的类，将原来A的isa指针指向新创建的类，实际上NSKVONotifying_A是A的子类，之所以继承A，是为了重写属性所对应的setter方法，来达到通知所有所有观察者的目的。"),v("br"),e._v("\n问3：重写setter方法时添加了什么方法？"),v("br"),e._v(" "),v("code",[e._v("- (void)willChangeValueForKey:(NSString *)key")]),v("br"),e._v(" "),v("code",[e._v("- (void)didChangeValueForKey:(NSString *)key")]),v("br"),e._v(" "),v("code",[e._v("- (void)setValue:(id)obj {")]),v("br"),e._v(" "),v("code",[e._v('[self willChangeValueForKey:@"keyPath"];')]),v("br"),e._v(" "),v("code",[e._v("[super setValue: obj];")]),v("br"),e._v(" "),v("code",[e._v('[self didChangeValueForKey:@"keyPath"];')]),v("br"),e._v(" "),v("code",[e._v("}")]),v("br"),e._v("\n问3：通过kvc设置value能否让kvo生效及为什么？"),v("br"),e._v("\n能。kvc可以调到setter方法上面，setter方法被动态运行时创建的子类重写了，就可以使kvo生效。")]),e._v(" "),v("p",[e._v("问4：通过成员变量直接复制value能否让kvo生效？"),v("br"),e._v("\n不能。比如objc里面有个increase方法"),v("code",[e._v("- (void)increase { _value += 1; }")]),e._v("，当在外部调用increase方法时，发现没有触发系统kvo，我们可以对increase进行一些修改来触发，在修改实例变量时添加will和did方法，或者通过self.xxx来触发，比如"),v("br"),e._v(" "),v("code",[e._v("- (void)increase {")]),v("br"),e._v(" "),v("code",[e._v('[self willChangeValueForKey: @"value"];')]),v("br"),e._v(" "),v("code",[e._v("_value += 1;")]),v("br"),e._v(" "),v("code",[e._v('[self didChangeValueForKey: @"value"];')]),v("br"),e._v(" "),v("code",[e._v("}")])]),e._v(" "),v("h2",{attrs:{id:"八、kvc"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#八、kvc"}},[e._v("#")]),e._v(" 八、KVC")]),e._v(" "),v("p",[e._v("问1：什么是kvc?\nkvc是系统为我们添加的键值编码技术，主要使用两个方法\nvalueForKey和setValueForKey"),v("br"),e._v("\n问2：kvc是否违背面向对象思想？"),v("br"),e._v("\n当我们知道某个类的某个私有变量，我们可以通过kvc来对私有变量进行修改，从这方面考虑的话，它是违背面向对象思想的。"),v("br"),e._v("\n问3：valueForKey实现流程？"),v("br"),e._v("\n首先系统会key判断是否有对应的getter方法，如果有，就调用并结束；如果没有，则判断实例变量是否存在，如果存在，直接获取实例变量的值，结束；如果没有，则调用valueForUndefinedKey并抛出异常，结束。"),v("br"),e._v("\n问4：setValueForKey实现流程？"),v("br"),e._v("\n首先会判断setter方法是否存在，如果有调用并结束；如果没有则判断实例变量是否存在，如果存在，直接调用实例变量的setValue方法并结束，如果没有，则调用setValueForUndefinedKey并抛出异常，并结束")]),e._v(" "),v("h2",{attrs:{id:"九、属性关键字"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#九、属性关键字"}},[e._v("#")]),e._v(" 九、属性关键字")]),e._v(" "),v("p",[e._v("读写权限："),v("br"),e._v("\nreadonly\nreadwrite为默认\n原子性："),v("br"),e._v("\natomic默认，保证赋值和获取是线程安全的，就是说，对成员的直接赋值和获取是线程安全的\nnoatomic"),v("br"),e._v("\n引用计数："),v("br"),e._v("\nretain/strong修饰对象"),v("br"),e._v("\nassign/unsafe_unretained,assign既可以修饰对象又可以修饰基本类型\nweak"),v("br"),e._v("\ncopy")]),e._v(" "),v("p",[e._v("问1：self.xxx和_xxx的区别？"),v("br"),e._v("\n1.self.xxx是访问属性，"),v("em",[e._v("xxx是访问实例变量"),v("br"),e._v("\n2.属性是实例变量加上getter、setter方法的一个整合体，它主要承担一个外部访问的接口"),v("br"),e._v('\n3.实例变量只能在当前类中才可以访问，外部不可以访问\n4.总的原则是在类内部访问的时候用"')]),e._v('"，在类外部也就是其他类离访问这个类的变量时用"."语法'),v("br"),e._v("\n问2：dynamic和synthesize的区别？\n默认是@synthesize var = _var，自动生成成员变量，如果手动实现了setter或者getter方法，那么property就不会自动生成成员变量，此时使用_xxx将会报错，需要显示定义@synthesize var = _var"),v("br"),e._v("\n@dynamic告诉编译器，属性的setter和getter方法由用户自己实现，不自动生成，如果我们没有实现setter和getter方法，编译时没有问题，使用时将会崩溃\n问3：assign和weak的区别？"),v("br"),e._v("\n1.assign可以修饰对象和基本数据类型，weak只可以修饰对象\n2.weak修饰的对象，在引用计数为0时，指针会置为nil，assign修饰的对象会产生野指针"),v("br"),e._v("\n问5：浅拷贝和深拷贝的区别？\n浅拷贝是对内存地址的拷贝，目标指针和源指针指向同一片内存空间"),v("br"),e._v("\n深拷贝是让目标对象指针和源对象指针分别指向两片内容相同的内存空间"),v("br"),e._v("\n浅拷贝增加引用计数，深拷贝不增加引用计数"),v("br"),e._v("\n问6：copy关键字的结果是什么样的？\n"),v("img",{attrs:{src:r(429),alt:"copy关键字"}})]),e._v(" "),v("h2",{attrs:{id:"十、-load和-initialize"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#十、-load和-initialize"}},[e._v("#")]),e._v(" 十、+load和+initialize")]),e._v(" "),v("p",[e._v("initialize会在第一次初始化这个类之前被调用，我们用它来初始化静态变量"),v("br"),e._v("\nload在iOS应用启动的时候，在main函数调用之前就会调用")]),e._v(" "),v("h2",{attrs:{id:"nscache和nsdictionary"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#nscache和nsdictionary"}},[e._v("#")]),e._v(" NSCache和NSDictionary")]),e._v(" "),v("p",[e._v("NSCache胜过NSDictionary之处在于：")]),e._v(" "),v("ol",[v("li",[e._v("当系统资源将要耗尽时，它可以自动删减缓存。")]),e._v(" "),v("li",[e._v("NSCache还会先行删减“最久未使用的”(lease recently used)对象。")]),e._v(" "),v("li",[e._v("NSCache 并不会“拷贝”键，而是会“保留”它。NSCache对象不拷贝键的原因在于：很多时候，键都是有不支持拷贝操作的对象来充当的。因此，NSCache 不会自动拷贝键，所以说，在健不支持拷贝操作的情况下，该类用起来比字典更方便。")]),e._v(" "),v("li",[e._v("NSCache是线程安全的。而NSDictionary则绝不具备此优势，意思就是：在开发者自己不编写加锁代码的前提下，多个线程便可以同时访问NSCache.")])])])}),[],!1,null,null,null);a.default=t.exports}}]);