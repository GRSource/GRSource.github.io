(window.webpackJsonp=window.webpackJsonp||[]).push([[48],{591:function(a,v,t){"use strict";t.r(v);var _=t(65),e=Object(_.a)({},(function(){var a=this,v=a.$createElement,t=a._self._c||v;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"ffmpeg"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ffmpeg"}},[a._v("#")]),a._v(" FFmpeg")]),a._v(" "),t("h2",{attrs:{id:"命令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#命令"}},[a._v("#")]),a._v(" 命令")]),a._v(" "),t("h3",{attrs:{id:"查看文件信息"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#查看文件信息"}},[a._v("#")]),a._v(" 查看文件信息")]),a._v(" "),t("ul",[t("li",[a._v("ffprobe ~/Desktop/32037.mp3")]),a._v(" "),t("li",[a._v("ffprobe ~/Desktop/32037.mp4")])]),a._v(" "),t("h3",{attrs:{id:"格式信息"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#格式信息"}},[a._v("#")]),a._v(" 格式信息")]),a._v(" "),t("ul",[t("li",[a._v("ffprobe -show_format 32037.mp4")])]),a._v(" "),t("h3",{attrs:{id:"json格式流信息"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#json格式流信息"}},[a._v("#")]),a._v(" json格式流信息")]),a._v(" "),t("ul",[t("li",[a._v("ffprobe -print_format json -show_streams 32037.mp4")])]),a._v(" "),t("h3",{attrs:{id:"显示帧信息"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#显示帧信息"}},[a._v("#")]),a._v(" 显示帧信息")]),a._v(" "),t("ul",[t("li",[a._v("ffprobe -show_frames sample.mp4")])]),a._v(" "),t("h3",{attrs:{id:"查看包信息"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#查看包信息"}},[a._v("#")]),a._v(" 查看包信息")]),a._v(" "),t("ul",[t("li",[a._v("ffprobe -show_packets sample.mp4")])]),a._v(" "),t("h3",{attrs:{id:"播放"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#播放"}},[a._v("#")]),a._v(" 播放")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("ffplay")]),a._v(" "),t("ul",[t("li",[a._v("ffplay 32037.mp3")]),a._v(" "),t("li",[a._v("ffplay 32037.mp4 -loop 10")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("循环十次\n")])])]),t("ul",[t("li",[t("p",[a._v("ffplay 大话西游.mkv -ast 1")]),a._v(" "),t("p",[a._v("播放第一路音频")])]),a._v(" "),t("li",[t("p",[a._v("ffplay 大话西游.mkv -vst 1")]),a._v(" "),t("p",[a._v("播放第一路视频")])]),a._v(" "),t("li",[t("p",[a._v("ffplay song.pcm -f s16le -channels 2 -ar 44100")])])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("播放裸数据，必须指定格式-f，声道数-channels，采样率-ar，WAV封装格式称为无损格式，实际上就是在PCM头部添加了44字节头用于标识这些数据\n")])])]),t("ul",[t("li",[t("p",[a._v("ffplay -f rawvideo -pixel_format yuv420p -s 480x480 texture.yuv")]),a._v(" "),t("p",[a._v("播放裸数据，必须包含格式（-f rawvideo表示原始格式）、表示格式-pixel_format、宽高-s")])]),a._v(" "),t("li",[t("p",[a._v("ffplay -s 1366x768 -vf extractplanes='y' texture.yuv")]),a._v(" "),t("p",[a._v("只播放y屏幕视频")])]),a._v(" "),t("li",[t("p",[a._v("ffplay 32037.mp4 -sync audio")])])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("以音频为基准进行音视频同步\n")])])]),t("ul",[t("li",[t("p",[a._v("ffplay 32037.mp4 -sync video")]),a._v(" "),t("p",[a._v("以视频为基准进行音视频同步")])]),a._v(" "),t("li",[t("p",[a._v("ffplay 32037.mp4 -sync ext")]),a._v(" "),t("p",[a._v("以外部时钟为基准进行音视频同步")])])])])]),a._v(" "),t("h3",{attrs:{id:"ffmpeg-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ffmpeg-2"}},[a._v("#")]),a._v(" ffmpeg")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("-f")]),a._v(" "),t("p",[a._v("指定格式")])]),a._v(" "),t("li",[t("p",[a._v("-i")]),a._v(" "),t("p",[a._v("指定输入")])]),a._v(" "),t("li",[t("p",[a._v("-y")]),a._v(" "),t("p",[a._v("覆盖已有文件")])]),a._v(" "),t("li",[t("p",[a._v("-t")]),a._v(" "),t("p",[a._v("指定时长")])]),a._v(" "),t("li",[t("p",[a._v("-fs")]),a._v(" "),t("p",[a._v("设定文件大小的上限")])]),a._v(" "),t("li",[t("p",[a._v("-ss")]),a._v(" "),t("p",[a._v("从指定时间开始")])]),a._v(" "),t("li",[t("p",[a._v("-re")]),a._v(" "),t("p",[a._v("按帧率发送")])]),a._v(" "),t("li",[t("p",[a._v("-map")]),a._v(" "),t("p",[a._v("输出文件的流映射关系，例如:“-map 1:0-map 1: 1”要求将第二个输入文件的第一个流和第二个流写入输出文件。如果没 有-map选项，则ffmpeg采用默认的映射关系。")])]),a._v(" "),t("li",[t("p",[a._v("-formats")]),a._v(" "),t("p",[a._v("列出ffmpeg支持的所有格式")])]),a._v(" "),t("li",[t("p",[a._v("视频参数")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("-b")]),a._v(" "),t("p",[a._v("指定比特率")])]),a._v(" "),t("li",[t("p",[a._v("-bitexact")]),a._v(" "),t("p",[a._v("使用标准比特率")])]),a._v(" "),t("li",[t("p",[a._v("-vb")]),a._v(" "),t("p",[a._v("指定视频比特率")])]),a._v(" "),t("li",[t("p",[a._v("-r")]),a._v(" "),t("p",[a._v("帧速率")])]),a._v(" "),t("li",[t("p",[a._v("-vcodec")]),a._v(" "),t("p",[a._v("指定编码方式，copy代表不进行重新编码")])]),a._v(" "),t("li",[t("p",[a._v("-s")]),a._v(" "),t("p",[a._v("指定分辨率")])]),a._v(" "),t("li",[t("p",[a._v("-vn")]),a._v(" "),t("p",[a._v("取消视频的输出")])]),a._v(" "),t("li",[t("p",[a._v("-aspect")]),a._v(" "),t("p",[a._v("设置视频长宽比")])]),a._v(" "),t("li",[t("p",[a._v("-padtop")]),a._v(" "),t("p",[a._v("设置顶部补齐尺寸")])]),a._v(" "),t("li",[t("p",[a._v("-padbottom")]),a._v(" "),t("p",[a._v("底补齐")])]),a._v(" "),t("li",[t("p",[a._v("-padleft")]),a._v(" "),t("p",[a._v("左补齐")])]),a._v(" "),t("li",[t("p",[a._v("-padright")]),a._v(" "),t("p",[a._v("右补齐")])]),a._v(" "),t("li",[t("p",[a._v("-padcolor")]),a._v(" "),t("p",[a._v("补齐带颜色")])]),a._v(" "),t("li",[t("p",[a._v("-croptop")]),a._v(" "),t("p",[a._v("设置顶部切除尺寸")])]),a._v(" "),t("li",[t("p",[a._v("-cropbottom")]),a._v(" "),t("p",[a._v("设置底部切除尺寸")])]),a._v(" "),t("li",[t("p",[a._v("-cropleft")]),a._v(" "),t("p",[a._v("设置左切除尺寸")])]),a._v(" "),t("li",[t("p",[a._v("-cropright")]),a._v(" "),t("p",[a._v("设置右切除尺寸")])])])]),a._v(" "),t("li",[t("p",[a._v("音频参数")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("-ab")]),a._v(" "),t("p",[a._v("设置比特率")])]),a._v(" "),t("li",[t("p",[a._v("-aq")]),a._v(" "),t("p",[a._v("设置音频质量")])]),a._v(" "),t("li",[t("p",[a._v("-ar")]),a._v(" "),t("p",[a._v("设置音频采样率")])]),a._v(" "),t("li",[t("p",[a._v("-ac")]),a._v(" "),t("p",[a._v("设置声道数")])]),a._v(" "),t("li",[t("p",[a._v("-an")]),a._v(" "),t("p",[a._v("取消音频轨")])]),a._v(" "),t("li",[t("p",[a._v("-acodec")]),a._v(" "),t("p",[a._v("指定音频编码('copy'代表不做音频转码，直接复 制)。")])]),a._v(" "),t("li",[t("p",[a._v("-vol")]),a._v(" "),t("p",[a._v("设置录制音量大小(默认为256)<百分比>。")])])])]),a._v(" "),t("li",[t("p",[a._v("操作")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("ffmpeg -i input.mp4 -ss 00:00:50.0 -codec copy -t 20 output.mp4")]),a._v(" "),t("p",[a._v("剪切文件")])]),a._v(" "),t("li",[t("p",[a._v("ffmpeg -i input.mp4 -t 00:00:50 -c copy small-1.mp4 -ss 00:00:50 -codec copy small-2.mp4")]),a._v(" "),t("p",[a._v("分割")])]),a._v(" "),t("li",[t("p",[a._v("ffmpeg -i input.mp4 -vn -acodec copy output.m4a")]),a._v(" "),t("p",[a._v("提取音频")])]),a._v(" "),t("li",[t("p",[a._v("ffmpeg -i input.mp4 -an -vcodec copy output.mp4")]),a._v(" "),t("p",[a._v("提取视频")])]),a._v(" "),t("li",[t("p",[a._v("ffmpeg -i output.mp4 -an -vcodec copy -bsf:v h264_mp4toannexb output.h264")]),a._v(" "),t("p",[a._v("导出裸h264数据，-bsf表示比特率格式")])]),a._v(" "),t("li",[t("p",[a._v("ffmpeg -i test.aac -i test.h264 -acodec copy -bsf:a aac_adtstoasc -vcodec copy -f mp4 output.mp4")])])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("使用aac和h264生成mp4文件\n")])])]),t("ul",[t("li",[t("p",[a._v("ffmpeg -i input.wav -acodec libfdk_aac output.aac")]),a._v(" "),t("p",[a._v("对音频文件的编码格式做转换")])]),a._v(" "),t("li",[t("p",[a._v("ffmpeg -i input.wav -acodec pcm_s16le -f s16le output.pcm")]),a._v(" "),t("p",[a._v("从WAV音频文件中导出PCM裸数据，s16le表示位深16的小端数据")])]),a._v(" "),t("li",[t("p",[a._v("ffmpeg -i input.flv -vcodec libx264 -acodec copy output.mp4")]),a._v(" "),t("p",[a._v("重新编码视频文件，复制音频流，同时封装到MP4格式的文件 中")])]),a._v(" "),t("li",[t("p",[a._v("ffmpeg -i output.mp4 -r 0.25 frames_%04d.png")])])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("将一个视频的画面部分生成图片，0.25表示每秒0.25帧，也就是4秒截取一帧生成图片\n")])])]),t("ul",[t("li",[t("p",[a._v("ffmpeg -i frames_%04d.png -r 5 output.gif")]),a._v(" "),t("p",[a._v("使用一组图片可以组成一个gif")])]),a._v(" "),t("li",[t("p",[a._v("ffmpeg -i input.wav -af ‘volume=0.5’ output.wav")]),a._v(" "),t("p",[a._v("上述命令是将input.wav中的声音减小一半，输出到output.wav文件")])]),a._v(" "),t("li",[t("p",[a._v("ffmpeg -i input.wav -filter_complex afade=t=in:ss=0:d=5 output.wav")]),a._v(" "),t("p",[a._v("将input.wav文件中的前5s做一个淡入效果，输出到 output.wav中")])]),a._v(" "),t("li",[t("p",[a._v("ffmpeg -i input.wav -filter_complex afade=t=out:st=200:d=5 output.wav")]),a._v(" "),t("p",[a._v("淡出效果器，将input.wav文件从200s开始，做5s的淡出效果，并放 到output.wav文件中")])]),a._v(" "),t("li",[t("p",[a._v("ffmpeg -i vocal.wav -i accompany.wav -filter_complex amix=inputs=2:duration=shortest output.wav")]),a._v(" "),t("p",[a._v("将两路声音进行合并，比如要给一段声音加上背景音乐")])]),a._v(" "),t("li",[t("p",[a._v("ffmpeg -i vocal.wav -filter_complex atempo=0.5 output.wav")]),a._v(" "),t("p",[a._v("将vocal.wav按照0.5倍的速度进行处理生成output.wav， 时间长度将会变为输入的2倍。但是音高是不变的，这就是大家常说的 变速不变调。")])]),a._v(" "),t("li",[t("p",[a._v("ffmpeg -i input.mp4 -i changba_icon.png -filter_complex\n'[0:v][1:v]overlay=main_w-overlay_w-10:10:1[out]' -map '[out]' output.mp4")]),a._v(" "),t("p",[a._v("为视频增加水印，命令包含了几个内置参数，main_w代表主视频宽度， overlay_w代表水印宽度，main_h代表主视频高度，overlay_h代表水印 高度。")])]),a._v(" "),t("li",[t("p",[a._v("ffmpeg -i input.flv -c:v libx264 -b:v 800k -c:a libfdk_aac -vf eq=brightness=0.25  -f mp4 output.mp4")]),a._v(" "),t("p",[a._v("视频提亮效果器，提亮参数是brightness，取值范围是从-1.0到1.0，默认值是0。")])]),a._v(" "),t("li",[t("p",[a._v("ffmpeg -i input.flv -c:v libx264 -b:v 800k -c:a libfdk_aac -vf eq=contrast=1.5 -f mp4 output.mp4")]),a._v(" "),t("p",[a._v("为视频增加对比度效果，对比度参数是contrast，取值范围是从-2.0到2.0，默认值是1.0。")])]),a._v(" "),t("li",[t("p",[a._v('ffmpeg -i input.mp4 -vf "transpose=1" -b:v 600k output.mp4')]),a._v(" "),t("p",[a._v("视频旋转效果器")])]),a._v(" "),t("li",[t("p",[a._v('ffmpeg -i input.mp4 -an -vf  "crop=240:480:120:0" -vcodec libx264 -b:v 600k output.mp4')]),a._v(" "),t("p",[a._v("视频裁剪效果器")])]),a._v(" "),t("li",[t("p",[a._v("ffmpeg -f rawvideo -pix_fmt rgba -s 480*480 -i texture.rgb -f image2 -vcodec mjpeg output.jpg")]),a._v(" "),t("p",[a._v("将一张RGBA格式表示的数据转换为JPEG格式的图片")])]),a._v(" "),t("li",[t("p",[a._v("ffmpeg -f rawvideo -pix_fmt yuv420p -s 480*480 -i texture.yuv -f image2 -vcodec mjpeg output.jpg")]),a._v(" "),t("p",[a._v("将一个YUV格式表示的数据转换为JPEG格式的图片:")])]),a._v(" "),t("li",[t("p",[a._v("ffmpeg -re -i input.mp4 -acodec copy -vcodec copy -f flv rtmp://xxx")]),a._v(" "),t("p",[a._v("将一段视频推送到流媒体服务器上")])]),a._v(" "),t("li",[t("p",[a._v("ffmpeg -i http://xxx/xxx.flv -acodec copy -vcodec copy -f flv output.flv")]),a._v(" "),t("p",[a._v("将流媒体服务器上的流dump到本地:")])]),a._v(" "),t("li",[t("p",[a._v("ffmpeg -i 131.mp3 -i 134.mp3 -map 0:a -c🅰️0 libfdk_aac -b🅰️0 96k -map 1:a -c🅰️1  libfdk_aac -b🅰️1 64k -vn -f mp4 output.m4a")]),a._v(" "),t("p",[a._v("将两个音频文件以两路流的形式封装到一个文件中，比如在K 歌的应用场景中，原伴唱实时切换的场景下，可以使用一个文件包含两 路流，一路是伴奏流，另外一路是原唱流")])])])])]),a._v(" "),t("h2",{attrs:{id:"api"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#api"}},[a._v("#")]),a._v(" API")]),a._v(" "),t("h3",{attrs:{id:"avformatcontext"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#avformatcontext"}},[a._v("#")]),a._v(" AVFormatContext")]),a._v(" "),t("p",[a._v("对容器或者说媒体文 件层次的一个抽象，该文件中(或者说在这个容器里面)包含了多路流 (音频流、视频流、字幕流等)")]),a._v(" "),t("h3",{attrs:{id:"avstream"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#avstream"}},[a._v("#")]),a._v(" AVStream")]),a._v(" "),t("p",[a._v("对流的抽象")]),a._v(" "),t("h3",{attrs:{id:"avcodeccontext和avcodec"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#avcodeccontext和avcodec"}},[a._v("#")]),a._v(" AVCodecContext和AVCodec")]),a._v(" "),t("p",[a._v("对编解码格式以及编解码器的抽象")]),a._v(" "),t("h3",{attrs:{id:"avpacket"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#avpacket"}},[a._v("#")]),a._v(" AVPacket")]),a._v(" "),t("p",[a._v("压缩数据")]),a._v(" "),t("h3",{attrs:{id:"avframe"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#avframe"}},[a._v("#")]),a._v(" AVFrame")]),a._v(" "),t("p",[a._v("原始数据")]),a._v(" "),t("h2",{attrs:{id:"使用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用"}},[a._v("#")]),a._v(" 使用")]),a._v(" "),t("h3",{attrs:{id:"avformat-network-init"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#avformat-network-init"}},[a._v("#")]),a._v(" avformat_network_init();")]),a._v(" "),t("p",[a._v("注册网络协议")]),a._v(" "),t("h3",{attrs:{id:"avcodec-register-all"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#avcodec-register-all"}},[a._v("#")]),a._v(" avcodec_register_all()")]),a._v(" "),t("p",[a._v("注册编解码器")]),a._v(" "),t("h3",{attrs:{id:"av-register-all"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#av-register-all"}},[a._v("#")]),a._v(" av_register_all();")]),a._v(" "),t("p",[a._v("注册所有")]),a._v(" "),t("h2",{attrs:{id:"库"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#库"}},[a._v("#")]),a._v(" 库")]),a._v(" "),t("h3",{attrs:{id:"avutil"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#avutil"}},[a._v("#")]),a._v(" AVUtil")]),a._v(" "),t("p",[a._v("核心工具库，该模块是最基础的模块之一，下面的许多其他模块都会依赖该库做一些基本的音视频处理操作")]),a._v(" "),t("h3",{attrs:{id:"avformat"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#avformat"}},[a._v("#")]),a._v(" AVFormat")]),a._v(" "),t("p",[a._v("文件格式和协议库，该模块是最重要的模块之一，封装了Protocol层和Demuxer、Muxer层，使得协议和格式对于开发者来说是透明的")]),a._v(" "),t("h3",{attrs:{id:"avcodec"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#avcodec"}},[a._v("#")]),a._v(" AVCodec")]),a._v(" "),t("p",[a._v("编解码库，封装了Codec层，但是有一些Codec是具备自己的License的，FFmpeg是不会默认添加像libx264、FDK-AAC、lame等库的，但是FFMpeg就像一个平台一样，可以将其他的第三方的Codec以插件的方式添加进来，然后为开发者提供统一的接口。")]),a._v(" "),t("h3",{attrs:{id:"avfilter"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#avfilter"}},[a._v("#")]),a._v(" AVFilter")]),a._v(" "),t("p",[a._v("音视频滤镜库，该模块提供了包括音频特效和视频特效的处理，在使用FFmpeg的API进行编解码的过程中，直接使用该模块为音视频数据做特效处理是非常方便同时也非常高效的一种方式。")]),a._v(" "),t("h3",{attrs:{id:"avdevice"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#avdevice"}},[a._v("#")]),a._v(" AVDevice")]),a._v(" "),t("p",[a._v("输入输出设备库")]),a._v(" "),t("h3",{attrs:{id:"swrressample"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#swrressample"}},[a._v("#")]),a._v(" SwrRessample")]),a._v(" "),t("p",[a._v("该模块可用于音频重采样，可以对数字音频进行声道数、数据格式、采样率等多种基本信息的转换")]),a._v(" "),t("h3",{attrs:{id:"swscale"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#swscale"}},[a._v("#")]),a._v(" SWScale")]),a._v(" "),t("p",[a._v("该模块是将图像进行格式转换的模块，比如，可以将YUV的数据转换为RGB的数据")]),a._v(" "),t("h3",{attrs:{id:"postproc"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#postproc"}},[a._v("#")]),a._v(" PostProc")]),a._v(" "),t("p",[a._v("该模块可用于进行后期处理，当我们使用AVFilter的时候需要打开该模块的开关，因为Filter中会使用到该模块的一些基础函数。")]),a._v(" "),t("h2",{attrs:{id:"av-find-stream-info"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#av-find-stream-info"}},[a._v("#")]),a._v(" av_find_stream_info")]),a._v(" "),t("p",[a._v("如果达到了设置的值却还没有解析出对应的视频流和音频流的MetaData，那么就进入重试策略")]),a._v(" "),t("h3",{attrs:{id:"max-analyze-duration"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#max-analyze-duration"}},[a._v("#")]),a._v(" max_analyze_duration")]),a._v(" "),t("p",[a._v("设置探测数据量最大的解析数据长度，通常设置为75000")]),a._v(" "),t("h3",{attrs:{id:"probesize"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#probesize"}},[a._v("#")]),a._v(" probesize")]),a._v(" "),t("p",[a._v("设置探测数据量的大小，通常设置为50x1024")]),a._v(" "),t("h2",{attrs:{id:"avpacket-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#avpacket-2"}},[a._v("#")]),a._v(" AVPacket")]),a._v(" "),t("h3",{attrs:{id:"对于视频帧-一个avpacket就是一帧视频帧"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#对于视频帧-一个avpacket就是一帧视频帧"}},[a._v("#")]),a._v(" 对于视频帧，一个AVPacket就是一帧视频帧")]),a._v(" "),t("h3",{attrs:{id:"对于音频帧-一个avpacket有可能包含多个音频"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#对于音频帧-一个avpacket有可能包含多个音频"}},[a._v("#")]),a._v(" 对于音频帧，一个AVPacket有可能包含多个音频")]),a._v(" "),t("h3",{attrs:{id:"对于视频帧-avpacket只表示i-p-b帧-sps-pps不会在avpacket中体现。前四个字节表示nal的大小-avpacket当中已经不包含视频的起始码-00-00-00-01-了-估计是被ffmpeg库替换成了表示nal大小的四个字节了。第五个字节的后五位依旧表示nal单元类型-保持和码流二进制一致。所以我们在将avpacket还原成h264时-需要做两步-1-在遇到idr帧的avpacket时-我们需要先添加-sps-起始码、sps、pps起始码、pps-2-将avpacket开头四个字节替换成起始码"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#对于视频帧-avpacket只表示i-p-b帧-sps-pps不会在avpacket中体现。前四个字节表示nal的大小-avpacket当中已经不包含视频的起始码-00-00-00-01-了-估计是被ffmpeg库替换成了表示nal大小的四个字节了。第五个字节的后五位依旧表示nal单元类型-保持和码流二进制一致。所以我们在将avpacket还原成h264时-需要做两步-1-在遇到idr帧的avpacket时-我们需要先添加-sps-起始码、sps、pps起始码、pps-2-将avpacket开头四个字节替换成起始码"}},[a._v("#")]),a._v(" 对于视频帧，AVPacket只表示I/P/B帧，SPS/PPS不会在AVPacket中体现。前四个字节表示NAL的大小，AVPacket当中已经不包含视频的起始码(00 00 00 01)了，估计是被ffmpeg库替换成了表示NAL大小的四个字节了。第五个字节的后五位依旧表示nal单元类型，保持和码流二进制一致。所以我们在将AVPacket还原成h264时，需要做两步：1.在遇到IDR帧的avpacket时，我们需要先添加：sps 起始码、sps、pps起始码、pps; 2.将avpacket开头四个字节替换成起始码")]),a._v(" "),t("h2",{attrs:{id:"解封装后重采样"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#解封装后重采样"}},[a._v("#")]),a._v(" 解封装后重采样")]),a._v(" "),t("h3",{attrs:{id:"音频"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#音频"}},[a._v("#")]),a._v(" 音频")]),a._v(" "),t("ul",[t("li",[a._v("解封装后音频裸数据格式如果不是AV_SAMPLE_FMT_S16（16位有符号类型）就需要进行重采样")])]),a._v(" "),t("h3",{attrs:{id:"视频"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#视频"}},[a._v("#")]),a._v(" 视频")]),a._v(" "),t("ul",[t("li",[a._v("如果裸数据不是YUV420P，那么就要进行视频帧的格式转换")])]),a._v(" "),t("h2",{attrs:{id:"avformatcontext-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#avformatcontext-2"}},[a._v("#")]),a._v(" AVFormatContext")]),a._v(" "),t("h3",{attrs:{id:"interrupt-callback"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#interrupt-callback"}},[a._v("#")]),a._v(" interrupt_callback")]),a._v(" "),t("p",[a._v("超时回调，用于寻找流信息、实际的read_frame阶段")]),a._v(" "),t("h2",{attrs:{id:"audiounit"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#audiounit"}},[a._v("#")]),a._v(" AudioUnit")]),a._v(" "),t("h3",{attrs:{id:"使用audiounit播放音频数据时-需要将sint16数据转换为remoteionode可以播放的float32格式的音频数据"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用audiounit播放音频数据时-需要将sint16数据转换为remoteionode可以播放的float32格式的音频数据"}},[a._v("#")]),a._v(" 使用AudioUnit播放音频数据时，需要将sInt16数据转换为RemoteIONode可以播放的Float32格式的音频数据")]),a._v(" "),t("h2",{attrs:{id:"插件库"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#插件库"}},[a._v("#")]),a._v(" 插件库")]),a._v(" "),t("h3",{attrs:{id:"libyuv"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#libyuv"}},[a._v("#")]),a._v(" libyuv")]),a._v(" "),t("p",[a._v("Google开源的实现各种YUV与RGB之间相互转换、旋转、缩放的库")]),a._v(" "),t("h2",{attrs:{id:"ios端采集的是nv12-需要进行转换"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ios端采集的是nv12-需要进行转换"}},[a._v("#")]),a._v(" ios端采集的是NV12，需要进行转换")]),a._v(" "),t("h2",{attrs:{id:"因为在获取流信息时也要发生解码行为-所以max-analyze-duration如果设置太短-那么avcodeccontext中的pix-fmt可能为av-pix-fmt-none"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#因为在获取流信息时也要发生解码行为-所以max-analyze-duration如果设置太短-那么avcodeccontext中的pix-fmt可能为av-pix-fmt-none"}},[a._v("#")]),a._v(" 因为在获取流信息时也要发生解码行为，所以max_analyze_duration如果设置太短，那么AVCodecContext中的pix_fmt可能为AV_PIX_FMT_NONE")]),a._v(" "),t("h2",{attrs:{id:"linesize存储的是每行data中的数据大小"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#linesize存储的是每行data中的数据大小"}},[a._v("#")]),a._v(" linesize存储的是每行data中的数据大小")]),a._v(" "),t("h3",{attrs:{id:"yuv420p"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#yuv420p"}},[a._v("#")]),a._v(" yuv420p")]),a._v(" "),t("ul",[t("li",[a._v("linesize[0]对应data[0]的大小")]),a._v(" "),t("li",[a._v("linesize[1]对应data[1]的大小")]),a._v(" "),t("li",[a._v("linesize[2]对应data[2]的大小")])]),a._v(" "),t("h3",{attrs:{id:"音频-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#音频-2"}},[a._v("#")]),a._v(" 音频")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("交错模式")]),a._v(" "),t("ul",[t("li",[a._v("只有data[0]有数据，总大小linesize[0]")])])]),a._v(" "),t("li",[t("p",[a._v("平面模式")]),a._v(" "),t("ul",[t("li",[a._v("data[0]对应linesize[0]")]),a._v(" "),t("li",[a._v("data[0]和data[1]的数据大小是一样的，都为linesize[0]")])])])]),a._v(" "),t("h2",{attrs:{id:"av-read-frame"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#av-read-frame"}},[a._v("#")]),a._v(" av_read_frame")]),a._v(" "),t("h3",{attrs:{id:"传入avpacket-packet时-必须清空packet当中的数据再传入"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#传入avpacket-packet时-必须清空packet当中的数据再传入"}},[a._v("#")]),a._v(" 传入AVPacket packet时，必须清空packet当中的数据再传入")]),a._v(" "),t("h2",{attrs:{id:"找到编解码器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#找到编解码器"}},[a._v("#")]),a._v(" 找到编解码器")]),a._v(" "),t("h3",{attrs:{id:"avcodec-find-decoder-by-name-libfdk-aac"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#avcodec-find-decoder-by-name-libfdk-aac"}},[a._v("#")]),a._v(' avcodec_find_decoder_by_name("libfdk_aac")')]),a._v(" "),t("h3",{attrs:{id:"avcodec-find-encoder-by-name-libx264"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#avcodec-find-encoder-by-name-libx264"}},[a._v("#")]),a._v(' avcodec_find_encoder_by_name("libx264");')]),a._v(" "),t("p",[a._v("x264只用来编码")]),a._v(" "),t("h2",{attrs:{id:"avformat-open-input"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#avformat-open-input"}},[a._v("#")]),a._v(" avformat_open_input")]),a._v(" "),t("h3",{attrs:{id:"如果无法打开文件-那要去检查编译的库是否支持-可重新编译一次"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如果无法打开文件-那要去检查编译的库是否支持-可重新编译一次"}},[a._v("#")]),a._v(" 如果无法打开文件，那要去检查编译的库是否支持，可重新编译一次")]),a._v(" "),t("h2",{attrs:{id:"h264"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#h264"}},[a._v("#")]),a._v(" H264")]),a._v(" "),t("h3",{attrs:{id:"profile"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#profile"}},[a._v("#")]),a._v(" Profile")]),a._v(" "),t("p",[a._v("对视频压缩特性的描述，Profile越高，就说明采用了越高级的压缩特性。")]),a._v(" "),t("h3",{attrs:{id:"level"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#level"}},[a._v("#")]),a._v(" Level")]),a._v(" "),t("p",[a._v("Level是对视频的描述，Level越高，视频的码率、分辨率、fps越高")]),a._v(" "),t("h3",{attrs:{id:"gop"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#gop"}},[a._v("#")]),a._v(" GOP")]),a._v(" "),t("p",[a._v("每个GOP的第一帧是IDR帧，然后是B帧（通常2-3个），然后是P帧，然后B帧，然后P帧等等。SPS PPS  I   B   B   P   B  B  P   B   B   P ....\n如果有需要我们也可以在中间插入I帧\nSPS和PPS是一个GOP的开始，而不是I帧的开始")]),a._v(" "),t("h3",{attrs:{id:"帧"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#帧"}},[a._v("#")]),a._v(" 帧")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("I帧")]),a._v(" "),t("p",[a._v("关键帧")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("IDR帧")]),a._v(" "),t("p",[a._v("特殊的I帧，帧内压缩技术，解码器立即刷新帧，遇到IDR帧时，解码器会将缓冲区的数据清空，这样后面的数据帧只会参考IDR帧，不再参考缓冲区中其他的帧，因为被清空了")])])])]),a._v(" "),t("li",[t("p",[a._v("P帧")]),a._v(" "),t("p",[a._v("前向预测帧，帧间压缩技术，约占I帧的一半")])]),a._v(" "),t("li",[t("p",[a._v("B帧")]),a._v(" "),t("p",[a._v("双向预测帧，帧间压缩技术，先解码前后的帧，再解码B帧，占I帧的四分之一，占CPU、并且耗时长。")])])]),a._v(" "),t("h3",{attrs:{id:"块"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#块"}},[a._v("#")]),a._v(" 块")]),a._v(" "),t("p",[a._v("4x4像素")]),a._v(" "),t("h3",{attrs:{id:"宏块"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#宏块"}},[a._v("#")]),a._v(" 宏块")]),a._v(" "),t("p",[a._v("视频压缩操作的基本单元，无论是帧内压缩还是帧间压缩，它们都以宏块为单位，通常为16x16像素")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("I宏块")]),a._v(" "),t("p",[a._v("只能利用当前片中已解码的像素作为参考进行帧内预测")])]),a._v(" "),t("li",[t("p",[a._v("P宏块")]),a._v(" "),t("p",[a._v("可以利用前面已解码的图像作为参考图像进行帧内预测")])]),a._v(" "),t("li",[t("p",[a._v("B宏块")]),a._v(" "),t("p",[a._v("利用前后的参考图像进行帧内预测")])])]),a._v(" "),t("h3",{attrs:{id:"亚宏块"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#亚宏块"}},[a._v("#")]),a._v(" 亚宏块")]),a._v(" "),t("h3",{attrs:{id:"序列"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#序列"}},[a._v("#")]),a._v(" 序列")]),a._v(" "),t("h3",{attrs:{id:"片"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#片"}},[a._v("#")]),a._v(" 片")]),a._v(" "),t("p",[a._v("一帧视频图像可编码成一个或者多个片，每片包含整数个宏块，即每片至少一个宏块，最多时包含整个图像的宏块。为了限制误码的扩散和传输，是编码片相互间保持独立")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("I片")]),a._v(" "),t("p",[a._v("只包含I宏块")])]),a._v(" "),t("li",[t("p",[a._v("P片")]),a._v(" "),t("p",[a._v("P和I宏块")])]),a._v(" "),t("li",[t("p",[a._v("B片")])]),a._v(" "),t("li",[t("p",[a._v("SP片")])]),a._v(" "),t("li",[t("p",[a._v("SI片")])])]),a._v(" "),t("h3",{attrs:{id:"片组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#片组"}},[a._v("#")]),a._v(" 片组")]),a._v(" "),t("p",[a._v("片的组合")]),a._v(" "),t("h3",{attrs:{id:"压缩比"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#压缩比"}},[a._v("#")]),a._v(" 压缩比")]),a._v(" "),t("p",[a._v("1/100")]),a._v(" "),t("h3",{attrs:{id:"压缩技术"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#压缩技术"}},[a._v("#")]),a._v(" 压缩技术")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("帧内压缩")]),a._v(" "),t("p",[a._v("解决空域数据冗余问题")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("帧内预测")]),a._v(" "),t("p",[a._v("利用视频空间域的相关性，使用同一帧图像内临近的已编码像素预测当前的像素，以达到有效去除视频冗余的目的。意思就是存储一个像素的原始值，然后存储另外一个像素和当前像素的差值，达到节约空间的目的。")]),a._v(" "),t("ul",[t("li",[a._v("相邻像素差别不大，所以可以进行宏块预测")])])])])]),a._v(" "),t("li",[t("p",[a._v("帧间压缩")]),a._v(" "),t("p",[a._v("解决时域数据冗余问题")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("帧间预测（帧间压缩技术）")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("GOP")])]),a._v(" "),t("li",[t("p",[a._v("参考帧")])]),a._v(" "),t("li",[t("p",[a._v("运动估计")]),a._v(" "),t("ul",[t("li",[a._v("宏块匹配")]),a._v(" "),t("li",[a._v("运动矢量")])])]),a._v(" "),t("li",[t("p",[a._v("运动补偿")]),a._v(" "),t("ul",[t("li",[a._v("根据运动矢量和帧间预测方法，求得当前帧的估计值")])])])])])])]),a._v(" "),t("li",[t("p",[a._v("整数离散余弦变换(DCT)")]),a._v(" "),t("ul",[t("li",[a._v("将空间上的相关性变为频域上无关的数据然后进行量化")])])]),a._v(" "),t("li",[t("p",[a._v("CABAC压缩")])])]),a._v(" "),t("h3",{attrs:{id:"nalu"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#nalu"}},[a._v("#")]),a._v(" NALU")]),a._v(" "),t("p",[a._v("对于一个帧，帧内的第一片以00 00 00 01开头，后面的片以00 00 01开头。帧开头的第五个字节的后五位表示出的值如果是7就是SPS、8是PPS、5是IDR图像中的片、1是I/P/B帧。那如何判断I/P/B帧呢？如果第五个字节的后五位是1，则代表是普通的I/P/B帧，则可以通过第一片来判断，但完整性无法验证，因为一帧可能包含多片。")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("SPS")]),a._v(" "),t("p",[a._v("序列参数集，对GOP的参数设置，包括帧数、POC约束、参考帧的数量（解码时实际可以参考一帧也可以参考多帧，参考多帧压缩率会进一步降低）、解码图像的尺寸、帧场、编码模式。SPS序列：00 00 00 01 68...")])]),a._v(" "),t("li",[t("p",[a._v("PPS")]),a._v(" "),t("p",[a._v("图像参数集，对每一帧图像的描述，id、熵编码、初始量化参数等等。可从codec->extradata中获取PPS或者从数据流中获取。\nPPS帧的序列：00  00  00  01  68 ...")])]),a._v(" "),t("li",[t("p",[a._v("I/P/B")]),a._v(" "),t("p",[a._v("序列：00 00 00 01 01... 00 00 01...\n一个帧当中有多个片，后续的片以00 00 01开头")])]),a._v(" "),t("li",[t("p",[a._v("IDR")]),a._v(" "),t("p",[a._v("序列：00 00 00 01  65...00 00 01...\n因为一个帧当中会有多个片，所以后面的片都是以00 00 01开头")])])]),a._v(" "),t("h3",{attrs:{id:"量化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#量化"}},[a._v("#")]),a._v(" 量化")]),a._v(" "),t("h3",{attrs:{id:"变换"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#变换"}},[a._v("#")]),a._v(" 变换")]),a._v(" "),t("h2",{attrs:{id:"keyint-min"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#keyint-min"}},[a._v("#")]),a._v(" keyint_min")]),a._v(" "),t("h3",{attrs:{id:"当gop很大时-我们可以设置插入i帧的最小间隔"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#当gop很大时-我们可以设置插入i帧的最小间隔"}},[a._v("#")]),a._v(" 当GOP很大时，我们可以设置插入I帧的最小间隔")]),a._v(" "),t("h2",{attrs:{id:"mp4转flv"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mp4转flv"}},[a._v("#")]),a._v(" mp4转flv")]),a._v(" "),t("h3",{attrs:{id:"avformat-alloc-output-context2-avformat-free-context"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#avformat-alloc-output-context2-avformat-free-context"}},[a._v("#")]),a._v(" avformat_alloc_output_context2()/avformat_free_context()")]),a._v(" "),t("h3",{attrs:{id:"avformat-new-stream"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#avformat-new-stream"}},[a._v("#")]),a._v(" avformat_new_stream()")]),a._v(" "),t("p",[a._v("在新文件中创建流")]),a._v(" "),t("h3",{attrs:{id:"avcodec-parameters-copy"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#avcodec-parameters-copy"}},[a._v("#")]),a._v(" avcodec_parameters_copy()")]),a._v(" "),t("p",[a._v("拷贝数据参数，例如sps/pps")]),a._v(" "),t("h3",{attrs:{id:"avformat-write-header"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#avformat-write-header"}},[a._v("#")]),a._v(" avformat_write_header()")]),a._v(" "),t("p",[a._v("写多媒体文件头")]),a._v(" "),t("h3",{attrs:{id:"av-write-frame-av-interleaved-write-frame"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#av-write-frame-av-interleaved-write-frame"}},[a._v("#")]),a._v(" av_write_frame()/av_interleaved_write_frame()")]),a._v(" "),t("p",[a._v("非交叉和交叉写，通常是交叉写")]),a._v(" "),t("h3",{attrs:{id:"av-write-trailer"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#av-write-trailer"}},[a._v("#")]),a._v(" av_write_trailer()")]),a._v(" "),t("p",[a._v("写多媒体尾部")]),a._v(" "),t("h2",{attrs:{id:"aac编码"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#aac编码"}},[a._v("#")]),a._v(" aac编码")]),a._v(" "),t("h3",{attrs:{id:"context"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#context"}},[a._v("#")]),a._v(" context")]),a._v(" "),t("ul",[t("li",[a._v("bit_rate")]),a._v(" "),t("li",[a._v("sample_fmt")]),a._v(" "),t("li",[a._v("sample_rate")]),a._v(" "),t("li",[a._v("channel_layout")]),a._v(" "),t("li",[a._v("channels")])]),a._v(" "),t("h2",{attrs:{id:"sdl"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#sdl"}},[a._v("#")]),a._v(" SDL")]),a._v(" "),t("p",[a._v("C语言实现的跨平台的媒体开源库，多用于开发游戏、模拟器、媒体播放器等多媒体应用领域")]),a._v(" "),t("h3",{attrs:{id:"sdl-init-sdl-quit"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#sdl-init-sdl-quit"}},[a._v("#")]),a._v(" SDL_Init/SDL_Quit()")]),a._v(" "),t("h3",{attrs:{id:"sdl-createwindown-sdl-destroywindow"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#sdl-createwindown-sdl-destroywindow"}},[a._v("#")]),a._v(" SDL_CreateWindown()/SDL_DestroyWindow()")]),a._v(" "),t("h3",{attrs:{id:"sdl-createrender-sdl-destroyrender"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#sdl-createrender-sdl-destroyrender"}},[a._v("#")]),a._v(" SDL_CreateRender/SDL_DestroyRender()")]),a._v(" "),t("h3",{attrs:{id:"sdl-renderclear"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#sdl-renderclear"}},[a._v("#")]),a._v(" SDL_RenderClear")]),a._v(" "),t("h3",{attrs:{id:"sdl-renderpresent"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#sdl-renderpresent"}},[a._v("#")]),a._v(" SDL_RenderPresent")]),a._v(" "),t("h2",{attrs:{id:"avcodeccontext"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#avcodeccontext"}},[a._v("#")]),a._v(" avCodecContext")]),a._v(" "),t("h3",{attrs:{id:"avcodeccontext-flags-av-codec-flag-global-header"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#avcodeccontext-flags-av-codec-flag-global-header"}},[a._v("#")]),a._v(" avCodecContext->flags |= AV_CODEC_FLAG_GLOBAL_HEADER;")]),a._v(" "),t("ul",[t("li",[a._v("将全局头部信息(sps/pps)放在extradata指针中，而不是每一个关键帧中")])]),a._v(" "),t("h3",{attrs:{id:"coded-frame"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#coded-frame"}},[a._v("#")]),a._v(" coded_frame")]),a._v(" "),t("h2",{attrs:{id:"视频编解码"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#视频编解码"}},[a._v("#")]),a._v(" 视频编解码")]),a._v(" "),t("h3",{attrs:{id:"ffmpeg-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ffmpeg-3"}},[a._v("#")]),a._v(" ffmpeg")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("硬编码")]),a._v(" "),t("ul",[t("li",[a._v('avcodec_find_encoder_by_name("h264_videotoolbox");')])])]),a._v(" "),t("li",[t("p",[a._v("软编码")]),a._v(" "),t("ul",[t("li",[a._v('avcodec_find_encoder_by_name("libx264")')])])]),a._v(" "),t("li",[t("p",[a._v("硬解码")]),a._v(" "),t("ul",[t("li",[a._v('type = av_hwdevice_find_type_by_name("videotoolbox");\ndecoder_Ctx->get_format = hw_get_format;\nav_hwdevice_ctx_create(&hw_device_ctx,type,NULL,NULL,0)\ndecoder_Ctx->hw_device_ctx = av_buffer_ref(hw_device_ctx);')])])]),a._v(" "),t("li",[t("p",[a._v("软解码")]),a._v(" "),t("ul",[t("li",[a._v("AVCodec * avCodec = avcodec_find_decoder(videoStream->codecpar->codec_id);")])])])]),a._v(" "),t("h3",{attrs:{id:"原生"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#原生"}},[a._v("#")]),a._v(" 原生")]),a._v(" "),t("ul",[t("li",[a._v("硬编码")]),a._v(" "),t("li",[a._v("硬解码")]),a._v(" "),t("li",[a._v("软编码")]),a._v(" "),t("li",[a._v("软解码")])]),a._v(" "),t("h2",{attrs:{id:"音频编解码"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#音频编解码"}},[a._v("#")]),a._v(" 音频编解码")]),a._v(" "),t("h3",{attrs:{id:"ffmpeg-4"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ffmpeg-4"}},[a._v("#")]),a._v(" ffmpeg")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("软解码")]),a._v(" "),t("ul",[t("li",[a._v("AVCodec * avCodec = avcodec_find_decoder(audioStream->codecpar->codec_id);")])])]),a._v(" "),t("li",[t("p",[a._v("硬解码")])]),a._v(" "),t("li",[t("p",[a._v("硬编码")])]),a._v(" "),t("li",[t("p",[a._v("软编码")]),a._v(" "),t("ul",[t("li",[a._v('AVCodec *codec = avcodec_find_encoder_by_name("libfdk_aac");')])])])]),a._v(" "),t("h3",{attrs:{id:"audiotoolbox"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#audiotoolbox"}},[a._v("#")]),a._v(" audioToolbox")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("硬编码")]),a._v(" "),t("ul",[t("li",[a._v("kAppleHardwareAudioCodecManufacturer")])])]),a._v(" "),t("li",[t("p",[a._v("软编码")]),a._v(" "),t("ul",[t("li",[a._v("kAppleSoftwareAudioCodecManufacturer")])])]),a._v(" "),t("li",[t("p",[a._v("硬解码(没试过)")]),a._v(" "),t("ul",[t("li",[a._v("kAppleHardwareAudioCodecManufacturer")])])]),a._v(" "),t("li",[t("p",[a._v("软解码(没试过)")]),a._v(" "),t("ul",[t("li",[a._v("kAppleSoftwareAudioCodecManufacturer")])])])]),a._v(" "),t("p",[t("em",[a._v("XMind - Trial Version")])])])}),[],!1,null,null,null);v.default=e.exports}}]);