(window.webpackJsonp=window.webpackJsonp||[]).push([[66],{609:function(v,_,l){"use strict";l.r(_);var i=l(65),a=Object(i.a)({},(function(){var v=this,_=v.$createElement,l=v._self._c||_;return l("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[l("h1",{attrs:{id:"数据结构与算法分析"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#数据结构与算法分析"}},[v._v("#")]),v._v(" 数据结构与算法分析")]),v._v(" "),l("h2",{attrs:{id:"抽象数据类型-adt"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#抽象数据类型-adt"}},[v._v("#")]),v._v(" 抽象数据类型(ADT)")]),v._v(" "),l("p",[v._v("是一些操作的集合，有点类似于泛型类，也是一些操作的几何")]),v._v(" "),l("h3",{attrs:{id:"表adt"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#表adt"}},[v._v("#")]),v._v(" 表ADT")]),v._v(" "),l("p",[v._v("A(i+1)后继A(i)，A(i-1)前驱A(i)")]),v._v(" "),l("ul",[l("li",[l("p",[v._v("表的实现")]),v._v(" "),l("ul",[l("li",[l("p",[v._v("1.数组")]),v._v(" "),l("ul",[l("li",[l("p",[v._v("缺点")]),v._v(" "),l("ul",[l("li",[v._v("插入和删除的运行时间是O(N)，而且表的大小还必须事先已知")])])])])]),v._v(" "),l("li",[l("p",[v._v("2.链表")]),v._v(" "),l("ul",[l("li",[l("p",[v._v("表头(哑节点)解决的问题")]),v._v(" "),l("ul",[l("li",[v._v("删除表的第一个元素时，不改变表的起始端，从而防止误操作使表丢失。")])])])])]),v._v(" "),l("li",[l("p",[v._v("3.双链表")]),v._v(" "),l("ul",[l("li",[v._v("简化了删除操作，因为你不再被迫使用一个指向前驱元的指针来访问一个关键字")])])]),v._v(" "),l("li",[l("p",[v._v("4.循环链表")])])])])]),v._v(" "),l("h3",{attrs:{id:"栈adt"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#栈adt"}},[v._v("#")]),v._v(" 栈ADT")]),v._v(" "),l("ul",[l("li",[l("p",[v._v("栈的实现")]),v._v(" "),l("ul",[l("li",[l("p",[v._v("链表")]),v._v(" "),l("ul",[l("li",[v._v("push和pop操作最大的开销是开辟内存和释放内存，如果需要提高效率，可以将push和pop的元素放入新栈当中")])])]),v._v(" "),l("li",[l("p",[v._v("数组")]),v._v(" "),l("ul",[l("li",[v._v("缺点是需要提前知道栈的大小")])])])])]),v._v(" "),l("li",[l("p",[v._v("栈的应用")]),v._v(" "),l("ul",[l("li",[l("p",[v._v("平衡括号")])]),v._v(" "),l("li",[l("p",[v._v("后缀求值法")]),v._v(" "),l("p",[v._v("对操作数进行入栈出栈操作")]),v._v(" "),l("ul",[l("li",[l("p",[v._v("计算器的实现，例如：4.99"),l("em",[v._v("1.06+5.99+6.99")]),v._v("1.06 =")]),v._v(" "),l("ul",[l("li",[l("p",[v._v("先得到后缀表达式4.99 1.06 * 5.99 + 6.99 1.06 * +")]),v._v(" "),l("ul",[l("li",[v._v("然后依次push数据入栈，在遇到运算符时该运算符就作用于从该栈弹出的两个数上，将所得结果推入栈中")])])])])])])]),v._v(" "),l("li",[l("p",[v._v("将中缀表达式转换为后缀表达式")]),v._v(" "),l("p",[v._v("对操作符进行入栈出栈操作")]),v._v(" "),l("ul",[l("li",[l("p",[v._v("1.将数据依次写入输出")])]),v._v(" "),l("li",[l("p",[v._v("2.将符号进行入栈出栈操作")]),v._v(" "),l("ul",[l("li",[v._v("1.当需要入栈的运算符号优先级比栈顶元素优先级高时进行入栈操作")]),v._v(" "),l("li",[v._v("2.当需要入栈的符号优先级比栈顶元素优先级低或者相等时，弹出栈顶元素，写入输出，一直弹出，直到入栈元素比栈顶元素优先级高时，停止弹出，将需要入栈的符号压入栈中")]),v._v(" "),l("li",[v._v("3.当遇到左括号时，压入栈中，对括号后面需要入栈的符号进行第2步操作，当遇到右括号时，将栈中左括号顶部的元素全部弹出到输出当中，注意：对括号只是弹出，不需要输出操作")])])])])]),v._v(" "),l("li",[l("p",[v._v("函数调用")]),v._v(" "),l("ul",[l("li",[v._v("函数的调用类似于入栈出栈，所以当调用例程太多时，可能会发生栈溢出，从而崩溃。典型的就比如递归调用没有退出条件、再比如递归打印上万条链表数据都可能发生栈溢出。")])])])])])]),v._v(" "),l("h3",{attrs:{id:"队列adt"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#队列adt"}},[v._v("#")]),v._v(" 队列ADT")]),v._v(" "),l("ul",[l("li",[l("p",[v._v("队列的实现")]),v._v(" "),l("ul",[l("li",[v._v("链表")]),v._v(" "),l("li",[v._v("数组")])])])]),v._v(" "),l("h3",{attrs:{id:"优先队列-堆"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#优先队列-堆"}},[v._v("#")]),v._v(" 优先队列(堆)")]),v._v(" "),l("p",[v._v("堆就是父节点的值比子节点的值小的二叉树，其中根节点的值最小。\n二叉堆是一颗完全二叉树，是平衡的。\n左式堆不一定是完全二叉堆，也不一定是平衡的。\n左式堆的每个节点如果有右儿子那就必须有左儿子，当然这不是左式堆的定义，这只是左式堆的一个特性，因为左式堆跟NPL有关，左儿子的NPL>=右儿子的NPL。")]),v._v(" "),l("ul",[l("li",[l("p",[v._v("实现")]),v._v(" "),l("ul",[l("li",[l("p",[v._v("简单实现")]),v._v(" "),l("ul",[l("li",[l("p",[v._v("链表")]),v._v(" "),l("ul",[l("li",[v._v("在表头以O(1)进行insert，出队以O(N)进行删除最小元DeleteMin")])])]),v._v(" "),l("li",[l("p",[v._v("二叉查找树")]),v._v(" "),l("ul",[l("li",[v._v("入队平均运行时间和出队平均运行时间均为O(logN)。使用二叉查找树实现优先队列可能有些过分，因为二叉查找树支持许多优先队列并不需要的操作(浪费)。")])])])])]),v._v(" "),l("li",[l("p",[v._v("二叉堆(完全二叉树)")]),v._v(" "),l("p",[v._v("即完全二叉树，我们这里讨论根节点是最小元的情况。而且我们设置堆的序号0位置为一个很小的值。二叉堆是平衡的。二叉堆是一种特殊的左式堆，因为它满足左式堆的性质条件")]),v._v(" "),l("ul",[l("li",[l("p",[v._v("性质")]),v._v(" "),l("ul",[l("li",[l("p",[v._v("结构性")]),v._v(" "),l("ul",[l("li",[v._v("完全二叉树放入数组中(数组第一个元素存储头结点，我们把一个很小的值放在位置0处)，不难看出对于数组任意位置i的元素，其左儿子在位置2i上，右儿子在位置2i+1上。它的父亲节点则在位置i/2上。所以不需要指针遍历完全二叉树很方便")])])]),v._v(" "),l("li",[l("p",[v._v("堆序性")]),v._v(" "),l("ul",[l("li",[l("p",[v._v("是操作被快速执行的性质就是堆序性")]),v._v(" "),l("ul",[l("li",[l("p",[v._v("最小堆")]),v._v(" "),l("ul",[l("li",[v._v("对于堆中每个节点X，X的父亲中的关键字小于或等于X中的关键字，在这里我们假设关键字是整数，实际可能关键字可能是任意复杂的")])])]),v._v(" "),l("li",[l("p",[v._v("最大堆")]),v._v(" "),l("ul",[l("li",[v._v("对于堆中每个节点X，X的父亲中的关键字大于或等于X中的关键字，在这里我们假设关键字是整数，实际可能关键字可能是任意复杂的")])])])])])])])])]),v._v(" "),l("li",[l("p",[v._v("插入")]),v._v(" "),l("ul",[l("li",[l("p",[v._v("上滤策略")]),v._v(" "),l("ul",[l("li",[l("p",[v._v("我们总是在完全二叉树的最外层空穴位置插入新节点")]),v._v(" "),l("ul",[l("li",[v._v("1.如果插入后并不破坏堆序性，那么插入完成。")]),v._v(" "),l("li",[v._v("2.否则，我们把该空穴的父节点下移，如果在父节点处插入后仍然不满足堆序性，那么我们继续把祖父节点下移，一直找到可以插入的合适位置为止")])])]),v._v(" "),l("li",[l("p",[v._v("如果欲插入的元素是新的最小元，从而一直上滤到根处，那么这种插入的时间高达O(logN)")])])])]),v._v(" "),l("li",[l("p",[v._v("最坏时间复杂度")]),v._v(" "),l("ul",[l("li",[v._v("O(logN)")])])]),v._v(" "),l("li",[l("p",[v._v("平均来看时间复杂度为常数")])])])]),v._v(" "),l("li",[l("p",[v._v("删除")]),v._v(" "),l("ul",[l("li",[l("p",[v._v("下滤策略")]),v._v(" "),l("ul",[l("li",[l("p",[v._v("我们总是删除堆中最小的元，删除不难，从根节点删除即可，删除之后我们要填充根节点这个空穴，显然删除完成后，需要将最后一片叶子填充到合适位置")]),v._v(" "),l("ul",[l("li",[v._v("1.我们比较左右儿子以及树的最后一片叶子，谁小用谁来填充空穴")]),v._v(" "),l("li",[v._v("2.如果最后一片叶子填充到空穴当中了，那么循环结束")]),v._v(" "),l("li",[v._v("3.如果左右儿子较小的值填充到了空穴，那么儿子的位置就产生了空穴。")]),v._v(" "),l("li",[v._v("4.重复该过程，空穴的位置一直下移，直到我们找到可以填充最后一片叶子的位置为止")])])])])]),v._v(" "),l("li",[l("p",[v._v("时间复杂度")]),v._v(" "),l("ul",[l("li",[v._v("O(logN)")])])])])]),v._v(" "),l("li",[l("p",[v._v("降低关键字的值")]),v._v(" "),l("ul",[l("li",[v._v("通过上滤来调整堆，调整后，系统管理程序能够使它们的程序以最高的优先级来运行")])])]),v._v(" "),l("li",[l("p",[v._v("增加关键字的值")]),v._v(" "),l("ul",[l("li",[v._v("通过下滤来调整堆，调整后，许多调度程序自动地降低正在过多地消耗CPU时间的进程的优先级。")])])]),v._v(" "),l("li",[l("p",[v._v("构建堆")]),v._v(" "),l("p",[v._v("N/2节点位置开始其实就是倒数第二层位置开始，因为叶子节点没有子节点，所以需要从倒数第二层开始遍历")]),v._v(" "),l("ul",[l("li",[l("p",[v._v("过程")]),v._v(" "),l("ul",[l("li",[v._v("1.先将数据输入到二叉树当中")]),v._v(" "),l("li",[v._v("2.然后从N/2开始节点遍历到1的位置，比较每个节点和它的孩子的大小")]),v._v(" "),l("li",[v._v("3.如果该节点比孩子值大，那么就下滤该节点")]),v._v(" "),l("li",[v._v("4.如果下滤过后发现该节点还是比孩子大，那么久再次下滤该节点")]),v._v(" "),l("li",[v._v("5.然后继续遍历N/2-1,N/2-2,N/2-3......1")])])]),v._v(" "),l("li",[l("p",[v._v("时间复杂度")]),v._v(" "),l("ul",[l("li",[v._v("1.最坏情况是除叶子节点外，每个节点都下滤到树叶位置，所以下滤的总次数为节点的高度之和")]),v._v(" "),l("li",[v._v("2.不难证明一颗理想二叉树的高度和为：(2^(h+1)-1)-(h+1)")]),v._v(" "),l("li",[v._v("3.一颗完全二叉树的节点数N在2^h到2^(h+1)之间")]),v._v(" "),l("li",[v._v("4.所以下滤的总次数和N是线性关系")]),v._v(" "),l("li",[v._v("5.所以构建堆的时间复杂度为O(N)")])])])])])])]),v._v(" "),l("li",[l("p",[v._v("d-堆")]),v._v(" "),l("p",[v._v("d个儿子的堆，也是平衡的")]),v._v(" "),l("ul",[l("li",[v._v("insert时间复杂度O：以d为底，N的对数")]),v._v(" "),l("li",[v._v("DeleteMin时间复杂度O：d乘以以d为底，N的对数")]),v._v(" "),l("li",[v._v("例如2-堆、3-堆、4-堆.......")])])]),v._v(" "),l("li",[l("p",[v._v("左式堆")]),v._v(" "),l("p",[v._v("不是平衡的，但是也有堆序性，就是二叉堆的不平衡推广")]),v._v(" "),l("ul",[l("li",[l("p",[v._v("零路径长度NPL")]),v._v(" "),l("ul",[l("li",[v._v("定义为从任一节点X到一个没有两个儿子的节点Y的最短路径的长。所以可以得到叶子节点和只有一个儿子的节点的Npl均为0，空节点的Npl为-1")])])]),v._v(" "),l("li",[l("p",[v._v("性质")]),v._v(" "),l("ul",[l("li",[v._v("任一节点的零路径长比它的诸儿子节点的零路径长的最小值多1，其实不难理解，因为父节点比子节点高度高1，所以可以通过取得所有子节点的NPL中的最小值来求父节点NPL")]),v._v(" "),l("li",[v._v("对于堆中的每一个节点X，左儿子的零路径长至少与右儿子的零路径长一样大。即左儿子NPL>=右儿子NPL")])])]),v._v(" "),l("li",[l("p",[v._v("定理")]),v._v(" "),l("ul",[l("li",[l("p",[v._v("如果一个节点有右儿子，那么必须就有左儿子")]),v._v(" "),l("ul",[l("li",[v._v("因为如果有右儿子而没有左儿子，那么左儿子的NPL=-1，右儿子NPL最少为0，不符合左式堆的定义")])])]),v._v(" "),l("li",[l("p",[v._v("在右路径上有r个节点的左式树必然至少有2^r-1个节点。")]),v._v(" "),l("ul",[l("li",[v._v("这一点也非常好理解，因为如果右路径上有r个节点，那么左式树的深度最少为r-1(1是根节点)，根据有右儿子就必然会有左儿子原则，所以树从0到r-1的深度是一颗理想二叉树，理想二叉树共有2^r-1个节点。所以左式树最少有2^r-1个节点")])])]),v._v(" "),l("li",[l("p",[v._v("根据上述定理，也可以得到N个节点的左式树有一条右路径最多含有log(N+1)个节点")])])])]),v._v(" "),l("li",[l("p",[v._v("右路径")]),v._v(" "),l("ul",[l("li",[v._v("就是节点的右儿子的右儿子的右儿子的右儿子的右儿子组成的路径….就是一只往右儿子下去。")])])]),v._v(" "),l("li",[l("p",[v._v("合并")]),v._v(" "),l("ul",[l("li",[l("p",[v._v("递归实现")]),v._v(" "),l("ul",[l("li",[l("p",[v._v("对于两个左式堆H1和H2，如果H1的根节点值<H2的根节点值，那么我们将H1的右子堆和H2进行合并，然后将合并后的结果当做H1的右子堆，形成的新堆不一定是左式的，但是根节点的左子堆和右子堆他们分别是左式的，如果右子堆的NPL>左子堆的NPL，那么我们交换左右子堆，否则不交换，最后得到合并后的左式堆H3（注意：我们最后需要更新根节点的NPL）。")]),v._v(" "),l("ul",[l("li",[v._v("H1的左子堆的任何节点NPL不需要更新")]),v._v(" "),l("li",[v._v("H1的右子堆的任何节点NPL需要更新")]),v._v(" "),l("li",[v._v("H1的根节点NPL需要更新")]),v._v(" "),l("li",[v._v("H2的任何节点NPL需要更新")])])]),v._v(" "),l("li",[l("p",[v._v("那小根堆H1的右子堆怎么跟大根堆H2合并呢？我们同样将H1的右子堆当做一个独立的堆H与H2进行合并，合并规则上述已经讲过了。不难看出左式堆的合并可以采用递归的方式进行，当合并到最后，一个堆是空堆一个堆是非空堆时，我们直接返回非空堆，将非空堆添加到小根堆的右子树，然后该交换的交换，该更新NPL的更新NPL。")])]),v._v(" "),l("li",[l("p",[v._v("时间复杂度")]),v._v(" "),l("ul",[l("li",[v._v("执行合并的时间与右路径的长的和成正比，因为在递归调用期间对每一个被访问的节点执行的是常数工作量。")]),v._v(" "),l("li",[v._v("因为每次都是取右子堆进行合并，所以递归的总次数为两个堆H1和H2的右路径之和，因为我们从定理可以知道对于N个节点的左式堆，右路径最多含有log(N+1)个节点，所以可得时间复杂度为O(log(N+N))，即O(logN)")])])])])]),v._v(" "),l("li",[l("p",[v._v("循环实现")]),v._v(" "),l("ul",[l("li",[v._v("1.合并两个堆的右路径建立一颗新的树，这颗新树肯定就是小根堆新的右子树了")]),v._v(" "),l("li",[v._v("2.合并规则：我们以排序的顺序安排两个堆右路径上的节点，保持他们各自的左儿子不变")]),v._v(" "),l("li",[v._v("3.交换那些不满足左式堆性质的左右儿子")])])])])]),v._v(" "),l("li",[l("p",[v._v("删除DeleteMin")]),v._v(" "),l("ul",[l("li",[v._v("为了执行DeleteMin，我们只需要除掉根得到两个堆，然后再将这两个堆合并即可，因为合并的时间复杂度为O(logN)，所以删除的时间复杂度也为O(logN)")])])]),v._v(" "),l("li",[l("p",[v._v("插入")]),v._v(" "),l("ul",[l("li",[v._v("插入操作可以看做一个单节点堆和一个多节点堆的合并操作")])])])])]),v._v(" "),l("li",[l("p",[v._v("斜堆")]),v._v(" "),l("p",[v._v("和左式堆的不同之处在于：不保留零路径长信息以及不做结构限制。左式堆是斜堆的特殊情形")]),v._v(" "),l("ul",[l("li",[l("p",[v._v("每次操作的摊还时间复杂度")]),v._v(" "),l("ul",[l("li",[v._v("O(logN)")])])]),v._v(" "),l("li",[l("p",[v._v("每次操作的最坏时间复杂度")]),v._v(" "),l("ul",[l("li",[v._v("O(N)")])])]),v._v(" "),l("li",[l("p",[v._v("合并")]),v._v(" "),l("ul",[l("li",[l("p",[v._v("递归实现")]),v._v(" "),l("ul",[l("li",[v._v("合并流程跟左式堆一样，只是斜堆的合并不需要判断左右子堆NPL的值来判断是否需要交换，斜堆在每次合并完之后直接进行交换左右子堆，合并的次数仍然是右路径的长度和。")]),v._v(" "),l("li",[v._v("在斜堆的合并定义里面会说除了右路径上所有节点的最大者不交换它们的左右儿子外，交换是无条件的。其实我们无需把它当做不交换的特殊情况，因为两个堆一起的所有右路径的最大者肯定没有右孩子，并且是右路径的终点，当然不会拿它的右子堆和其他堆去合并，只会用它来跟其它子堆合并，就没有交换它的左右孩子一说了。所以我们只需要每次合并之后交换左右孩子即可，无需特殊处理。")])])]),v._v(" "),l("li",[l("p",[v._v("循环实现")]),v._v(" "),l("ul",[l("li",[v._v("1.像左式堆一样合并右路径")]),v._v(" "),l("li",[v._v("2.除右路径最后的节点外，交换右路径上每个节点的左儿子和右儿子")])])])])]),v._v(" "),l("li",[l("p",[v._v("斜堆相比左式堆而言合并效率更高，因为不需要附加的空间来保留路径长度，也不需要测试确定何时交换儿子")])])])]),v._v(" "),l("li",[l("p",[v._v("二项队列")]),v._v(" "),l("ul",[l("li",[l("p",[v._v("每次操作最坏运行时间O(logN)")])]),v._v(" "),l("li",[l("p",[v._v("插入操作平均花费常数时间")])]),v._v(" "),l("li",[l("p",[v._v("高度为0的二项树是一颗单节点树，高度为k的二项树B(k)是通过将一颗二项树B(k-1)附接到二项树B(k-1)的根节点上去的树。所以不难看出B(k)和B(k-1)的节点数是等比数列2^k")])]),v._v(" "),l("li",[l("p",[v._v("对于每颗二项树，其每个深度d处所在的层的节点数恰好是二项系数C(k, d)=A(k, d)/d!=k!/(k-d)!/d!")])]),v._v(" "),l("li",[l("p",[v._v("二项队列其实就是森林，我们将二项队列的大小(节点数)分解为2^a、2^b、2^c......等等的和，分解后的项是唯一确定的且他们的幂指数是不同的，每一个项都代表一颗二项树，2^x就是每颗二项树的节点数，其中x为树的高度，且每颗二项树都是堆序树毋庸置疑。那么分解后的项数是多少呢？森林的总节点数为N，假设我们分解得到2^0、2^1、2^2......2^n这些全部的项(其中n代表项数-1)，那么根据等比数列求和公式，我们可以得到n = log(N+1)-1，所以项数位最多为log(N+1)，即最多有logN颗不同的树")])]),v._v(" "),l("li",[l("p",[v._v("二项队列的最小元在每颗树的根节点上，而队列最多有logN颗不同的树，所以最小元可以在O(logN)时间内找到。")])]),v._v(" "),l("li",[l("p",[v._v("合并")]),v._v(" "),l("ul",[l("li",[v._v("将高度相同的二项树进行合并，即将大根树当做小根树的子树，每棵树的合并花费常数时间，总共有logN颗树需要合并，所以最坏情形下花费O(logN)")])])]),v._v(" "),l("li",[l("p",[v._v("插入")]),v._v(" "),l("ul",[l("li",[v._v("插入其实就是特殊的合并，即只需创建一颗单节点树并执行一次合并即可")]),v._v(" "),l("li",[v._v("最坏情形运行时间O(logN)")]),v._v(" "),l("li",[v._v("如果往空的二项队列中进行N次insert，将花费的最坏情形时间为O(N)")])])]),v._v(" "),l("li",[l("p",[v._v("删除DeleteMin")]),v._v(" "),l("ul",[l("li",[l("p",[v._v("1.找到要操作的二项树，将其从原二项队列H1中拿出作为一个单独的二项队列H2")])]),v._v(" "),l("li",[l("p",[v._v("2.删除(DeleteMin)H2的根节点，此时H2分解为多个二项树，但仍然是一个二项队列")])]),v._v(" "),l("li",[l("p",[v._v("3.合并H1和H2队列")])]),v._v(" "),l("li",[l("p",[v._v("时间复杂度分析")]),v._v(" "),l("ul",[l("li",[v._v("1.查找最小元花费O(logN)")]),v._v(" "),l("li",[v._v("2.合并两个队列又是花费O(logN)")]),v._v(" "),l("li",[v._v("3.查找和合并是分步进行的，所以时间复杂度不是相乘，即整个DeleteMin操作花费时间O(logN)")])])])])]),v._v(" "),l("li",[l("p",[v._v("实现")]),v._v(" "),l("ul",[l("li",[v._v("二项树的每一个节点将包含数据、第一个儿子以及右兄弟。二项树中的诸儿子以递减次序排列。递减次序排列意思是：将根节点的指针指向子树最多的儿子，然后该儿子再以子树数量递减的顺序指向其它儿子，这么做是因为我们每次合并时都是将一颗树A拼接到另外一颗树A’的儿子上(即通过根节点直接指向树A，再将A的兄弟指针指向A‘的儿子)，而A就是A’的子树中最大的树，所以我们将根节点指向子树最多的儿子。")])])])])])])]),v._v(" "),l("li",[l("p",[v._v("应用")]),v._v(" "),l("ul",[l("li",[l("p",[v._v("查找整型数组当中第k小的数")]),v._v(" "),l("ul",[l("li",[l("p",[v._v("方法一")]),v._v(" "),l("ul",[l("li",[l("p",[v._v("1.将数组构建堆")]),v._v(" "),l("ul",[l("li",[v._v("时间复杂度为O(N)")])])]),v._v(" "),l("li",[l("p",[v._v("2.每次删除根节点")]),v._v(" "),l("ul",[l("li",[v._v("因为删除根节点后需要重新调整堆，其时间复杂度为O(logN)")])])]),v._v(" "),l("li",[l("p",[v._v("3.删除k次")]),v._v(" "),l("ul",[l("li",[v._v("所以删除操作的时间复杂度为O(klogN)")])])]),v._v(" "),l("li",[l("p",[v._v("4.如果k恰好是数组的中位数(即第N/2的位置)，那么其运行时间则为θ(NlogN)，比普通排序查找的时间复杂度O(N^2)要低")])]),v._v(" "),l("li",[l("p",[v._v("5.如果k等于N，那么我们会一直删除堆中的最小的元素，直到最后一个元素，我们把删除的最小元素做下记录，就得到了一个排完序的数列，我们把它叫做堆排序，堆排序时间复杂度为O(NlogN)")])])])]),v._v(" "),l("li",[l("p",[v._v("方法二")]),v._v(" "),l("ul",[l("li",[v._v("我们并不构建N个节点的堆，我们只构建k个节点的堆，每次将剩余的元素N-k与堆的根节点进行比较，每次比较后我们都会调整堆，调整的时间复杂度为O(logN)，所以总的时间复杂度为O(k + (N-k)logk) = O(Nlogk)。则中位数的时间复杂度为O(NlogN)")])])])])])])]),v._v(" "),l("li",[l("p",[v._v("堆的缺点")]),v._v(" "),l("ul",[l("li",[v._v("不能Find")])])])]),v._v(" "),l("h2",{attrs:{id:"递归"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#递归"}},[v._v("#")]),v._v(" 递归")]),v._v(" "),l("p",[v._v("当一个函数用它自己来定义时称为递归")]),v._v(" "),l("h3",{attrs:{id:"基本法则"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#基本法则"}},[v._v("#")]),v._v(" 基本法则")]),v._v(" "),l("ul",[l("li",[l("p",[v._v("基准情形")]),v._v(" "),l("ul",[l("li",[v._v("你必须总要有某些基准的情形，它们不用递归就能求解")])])]),v._v(" "),l("li",[l("p",[v._v("不断推进")]),v._v(" "),l("ul",[l("li",[v._v("对于那些需要递归求解的情形，递归调用必须总能朝着产生基准情形的方向推进。")])])]),v._v(" "),l("li",[l("p",[v._v("设计法则")]),v._v(" "),l("ul",[l("li",[v._v("假设所有的递归调用都能运行")])])]),v._v(" "),l("li",[l("p",[v._v("合成效益法则")]),v._v(" "),l("ul",[l("li",[v._v("在求解一个问题的同一实例时，切勿在不同的递归调用中做重复性的工作")])])])]),v._v(" "),l("h2",{attrs:{id:"数学定义"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#数学定义"}},[v._v("#")]),v._v(" 数学定义")]),v._v(" "),l("h3",{attrs:{id:"o"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#o"}},[v._v("#")]),v._v(" O")]),v._v(" "),l("ul",[l("li",[l("p",[v._v("T(N)=O(p(N))")]),v._v(" "),l("ul",[l("li",[v._v("T(N)的增长率小于等于p(N)")])])])]),v._v(" "),l("h3",{attrs:{id:"o-2"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#o-2"}},[v._v("#")]),v._v(" o")]),v._v(" "),l("ul",[l("li",[l("p",[v._v("T(N)=o(p(N))")]),v._v(" "),l("ul",[l("li",[v._v("T(N)的增长率小于p(N)")])])])]),v._v(" "),l("h3",{attrs:{id:"ω"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#ω"}},[v._v("#")]),v._v(" Ω")]),v._v(" "),l("ul",[l("li",[l("p",[v._v("T(N)=Ω(p(N))")]),v._v(" "),l("ul",[l("li",[v._v("T(N)的增长率大于等于p(N)")])])])]),v._v(" "),l("h3",{attrs:{id:"θ"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#θ"}},[v._v("#")]),v._v(" θ")]),v._v(" "),l("ul",[l("li",[l("p",[v._v("T(N)=θ(p(N))")]),v._v(" "),l("ul",[l("li",[v._v("T(N)的增长率等于p(N)")])])])]),v._v(" "),l("h2",{attrs:{id:"分治"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#分治"}},[v._v("#")]),v._v(" 分治")]),v._v(" "),l("h3",{attrs:{id:"_1-把问题分成两个大致相等的子问题-然后递归地对它们求解-这是-分-部分"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#_1-把问题分成两个大致相等的子问题-然后递归地对它们求解-这是-分-部分"}},[v._v("#")]),v._v(" 1.把问题分成两个大致相等的子问题，然后递归地对它们求解，这是”分“部分")]),v._v(" "),l("h3",{attrs:{id:"_2-治-阶段将两个子问题的解合并到一起并可能-再做些少量的附加工作-最后得到整个问题的解。"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#_2-治-阶段将两个子问题的解合并到一起并可能-再做些少量的附加工作-最后得到整个问题的解。"}},[v._v("#")]),v._v(" 2.”治“阶段将两个子问题的解合并到一起并可能 再做些少量的附加工作，最后得到整个问题的解。")]),v._v(" "),l("h2",{attrs:{id:"对数时间"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#对数时间"}},[v._v("#")]),v._v(" 对数时间")]),v._v(" "),l("h3",{attrs:{id:"如果一个算法用常数时间-o-1-将问题的大小削减为其一部分-通常是1-2-那么该算法就是o-logn-。另一方面-如果使用常数时间只是把问题减少一个常数-如将问题减少1-那么这种算法就是o-n-的。"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#如果一个算法用常数时间-o-1-将问题的大小削减为其一部分-通常是1-2-那么该算法就是o-logn-。另一方面-如果使用常数时间只是把问题减少一个常数-如将问题减少1-那么这种算法就是o-n-的。"}},[v._v("#")]),v._v(" 如果一个算法用常数时间（O(1)）将问题的大小削减为其一部分（通常是1/2），那么该算法就是O(logN)。另一方面，如果使用常数时间只是把问题减少一个常数(如将问题减少1)，那么这种算法就是O(N)的。")]),v._v(" "),l("h2",{attrs:{id:"对分查找-折半查找"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#对分查找-折半查找"}},[v._v("#")]),v._v(" 对分查找(折半查找)")]),v._v(" "),l("h3",{attrs:{id:"从已排序的数组中查找数据-可用对分查找"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#从已排序的数组中查找数据-可用对分查找"}},[v._v("#")]),v._v(" 从已排序的数组中查找数据，可用对分查找")]),v._v(" "),l("h2",{attrs:{id:"欧几里得算法-辗转相除法"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#欧几里得算法-辗转相除法"}},[v._v("#")]),v._v(" 欧几里得算法(辗转相除法)")]),v._v(" "),l("h3",{attrs:{id:"gcd-a-b-gcd-b-a-b"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#gcd-a-b-gcd-b-a-b"}},[v._v("#")]),v._v(" gcd(a, b) = gcd(b, a % b)")]),v._v(" "),l("ul",[l("li",[v._v("O(logN)")])]),v._v(" "),l("h3",{attrs:{id:"两个整数的最大公约数等于其中较小的那个数和两数相除余数的最大公约数"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#两个整数的最大公约数等于其中较小的那个数和两数相除余数的最大公约数"}},[v._v("#")]),v._v(" 两个整数的最大公约数等于其中较小的那个数和两数相除余数的最大公约数")]),v._v(" "),l("h2",{attrs:{id:"排序"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#排序"}},[v._v("#")]),v._v(" 排序")]),v._v(" "),l("h3",{attrs:{id:"基数排序"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#基数排序"}},[v._v("#")]),v._v(" 基数排序")]),v._v(" "),l("h3",{attrs:{id:"桶排序"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#桶排序"}},[v._v("#")]),v._v(" 桶排序")]),v._v(" "),l("h2",{attrs:{id:"树adt"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#树adt"}},[v._v("#")]),v._v(" 树ADT")]),v._v(" "),l("p",[v._v("对于大量的输入数据，链表的线性访问时间太慢，不宜使用")]),v._v(" "),l("h3",{attrs:{id:"根节点"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#根节点"}},[v._v("#")]),v._v(" 根节点")]),v._v(" "),l("h3",{attrs:{id:"树叶"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#树叶"}},[v._v("#")]),v._v(" 树叶")]),v._v(" "),l("h3",{attrs:{id:"兄弟"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#兄弟"}},[v._v("#")]),v._v(" 兄弟")]),v._v(" "),l("p",[v._v("具有相同父亲的节点")]),v._v(" "),l("h3",{attrs:{id:"边"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#边"}},[v._v("#")]),v._v(" 边")]),v._v(" "),l("p",[v._v("边的条数为从父亲节点到某个子节点的路径长度")]),v._v(" "),l("h3",{attrs:{id:"深度"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#深度"}},[v._v("#")]),v._v(" 深度")]),v._v(" "),l("p",[v._v("到根节点唯一路径的长度，因此根的深度为0")]),v._v(" "),l("h3",{attrs:{id:"高度"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#高度"}},[v._v("#")]),v._v(" 高度")]),v._v(" "),l("p",[v._v("是从该节点到一片树叶的最长路径的长，因此所有树叶的高都是0，一棵树的高度等于它的根的高度。")]),v._v(" "),l("h3",{attrs:{id:"内部路径长度"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#内部路径长度"}},[v._v("#")]),v._v(" 内部路径长度")]),v._v(" "),l("p",[v._v("所有节点的深度的和")]),v._v(" "),l("ul",[l("li",[l("p",[v._v("内部路径长度分析")]),v._v(" "),l("ul",[l("li",[l("p",[v._v("对于N个节点的树，树由一颗i个节点左子树和一颗N-i-1个节点右子树、以及根节点组成。当去掉根节点时，左子树和右子树的每个节点的深度都要减1，所以左子树和右子树总的内部路径长度会减(N-1)，得到内部路径长度表达式：D(N) = D(i)+D(N-i-1) + N -1")])]),v._v(" "),l("li",[l("p",[v._v("如果子树的大小都等可能地出现（即左右子树数量相当），那么D(N) = 2D((N-1)/2)+N-1")])]),v._v(" "),l("li",[l("p",[v._v("平均值D(N) = O(NlogN)")]),v._v(" "),l("ul",[l("li",[v._v("因此任意节点的期望深度为O(logN)")])])])])])]),v._v(" "),l("h3",{attrs:{id:"树的实现"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#树的实现"}},[v._v("#")]),v._v(" 树的实现")]),v._v(" "),l("ul",[l("li",[l("p",[v._v("如果将每个儿子节点的指针都存放在父节点当中，势必会造成存储空间的浪费，因为每个节点的的子节点数量是不确定的。解决办法是：将每个节点的所有儿子都放在树节点的链表中。")]),v._v(" "),l("ul",[l("li",[v._v("typedef struct TreeNode *PtrToNode;\nstruct TreeNode\n{\nElementType Element;//存放值\nPtrToNode FirstChild;//存放第一个子节点\nPtrToNode NextSibling;//存放下一个兄弟节点\n}")])])])]),v._v(" "),l("h3",{attrs:{id:"树的遍历"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#树的遍历"}},[v._v("#")]),v._v(" 树的遍历")]),v._v(" "),l("ul",[l("li",[l("p",[v._v("先序遍历")]),v._v(" "),l("p",[v._v("先遍历父节点(根节点)，再遍历左孩子、然后遍历右孩子。路径是从根节点一直向左孩子延伸，到达树叶后再从树叶的兄弟节点向根节点延伸。")]),v._v(" "),l("ul",[l("li",[v._v("打印文件路径")])])]),v._v(" "),l("li",[l("p",[v._v("后序遍历")]),v._v(" "),l("ul",[l("li",[v._v("计算每个文件夹的大小")])])]),v._v(" "),l("li",[l("p",[v._v("中序遍历")])])]),v._v(" "),l("h3",{attrs:{id:"二叉树"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#二叉树"}},[v._v("#")]),v._v(" 二叉树")]),v._v(" "),l("p",[v._v("每个节点都不能有多余两个的儿子。因为一颗二叉树最多有两个儿子，所以我们可以用指针直接指向它们，树节点的声明类似于双向链表，所以链表上的许多法则也可以应用到树上")]),v._v(" "),l("ul",[l("li",[l("p",[v._v("二叉查找树")]),v._v(" "),l("p",[v._v("树中的每个节点X，它的左子树中的值或者左子树的子树的值小于X的值，它的右子树的值或者右子树的子树的值大于X的值")]),v._v(" "),l("ul",[l("li",[l("p",[v._v("特性")]),v._v(" "),l("ul",[l("li",[v._v("最多2^(n+1)-1个节点，其中n为树的深度")]),v._v(" "),l("li",[v._v("深度的平均值是O(logN)，其中N为节点个数")])])]),v._v(" "),l("li",[l("p",[v._v("节点插入")]),v._v(" "),l("p",[v._v("插入只会在叶子节点上插入")]),v._v(" "),l("ul",[l("li",[v._v("1.如果节点根节点为null，那么我们就创建要插入的节点")]),v._v(" "),l("li",[v._v("2.如果要插入的节点的值比根节点小，那么就在左子树上进行插入(递归调用)")]),v._v(" "),l("li",[v._v("3.如果要插入的节点的值比根节点大，那么就在右子树上进行插入(递归调用)")]),v._v(" "),l("li",[v._v("4.最后返回根节点的指针")])])]),v._v(" "),l("li",[l("p",[v._v("节点删除")]),v._v(" "),l("ul",[l("li",[v._v("1.如果节点是一片树叶，那么它可以被立即删除")]),v._v(" "),l("li",[v._v("2.如果要删除的节点X只有一个孩子Y，那么就将原来指向节点X的父节点中的指针指向孩子Y")]),v._v(" "),l("li",[v._v("3.如果要删除的节点X有左孩子Y和右孩子Z，那么我们就将节点X的值替换成为X右子树序列中最小的节点W的值（最小值不可能有左孩子），然后将节点W删除，因为W最多只有一个孩子节点，所以我们在删除W时可以依照步骤2删除")])])]),v._v(" "),l("li",[l("p",[v._v("平衡二叉查找树")]),v._v(" "),l("p",[v._v("平衡二叉搜索树，叶子节点高度差不超过1")]),v._v(" "),l("ul",[l("li",[l("p",[v._v("AVL树")]),v._v(" "),l("p",[v._v("带有平衡条件的二叉查找树，深度为O(logN)，所以它的每个节点的左子树和右子树的高度最多差1")]),v._v(" "),l("ul",[l("li",[l("p",[v._v("对于高度为h的AVL树，我们可以求出最少需要的节点数：S(h) = S(h-1)+S(h-2)+1，意思是左子树的最少节点数+右子树最少节点数+根节点数量，其中左子树和右子树高度相差1时最少，所以一个是S(h-1)，另一个是S(h-2)，我们可以看到S(h)函数和斐波拉契数列密切相关，根据这个斐波拉契数量，我们可以推得另外一个公式：即N个节点最多的高度")]),v._v(" "),l("ul",[l("li",[v._v("例如高度为9的AVL树，最少需要143个节点才能组成，最多肯定就是2^(h+1)-1了")])])]),v._v(" "),l("li",[l("p",[v._v("对于N个节点的AVL树，我们可以求出高度最多为1.44log(N+2)-1.328")])]),v._v(" "),l("li",[l("p",[v._v("当对AVL树进行插入操作时，总会破坏树的平衡条件，所以我们可以通过对树进行旋转来恢复平衡。在插入以后，只有那些从插入点到根节点的路径上的节点的平衡可能被改变，因为只有这些节点的子树可能发生变化。")])]),v._v(" "),l("li",[l("p",[v._v("旋转")]),v._v(" "),l("p",[v._v("当我们插入一个节点后，顺次从插入节点的位置向根节点查找第一个失去平衡的节点α，失去平衡的节子树高度会差2，所以我们可以可以分为4种情况：")]),v._v(" "),l("ul",[l("li",[v._v("1.对α的左儿子的左子树进行一次插入")]),v._v(" "),l("li",[v._v("2.对α的右儿子的右子树进行一次插入")]),v._v(" "),l("li",[v._v("3.对α的左儿子的右子树进行一次插入")]),v._v(" "),l("li",[v._v("4.对α的右儿子的左子树进行一次插入")])])]),v._v(" "),l("li",[l("p",[v._v("每次操作时间复杂度O(logN)")])])])]),v._v(" "),l("li",[l("p",[v._v("Treap")])]),v._v(" "),l("li",[l("p",[v._v("节点大小平衡树")])])])]),v._v(" "),l("li",[l("p",[v._v("伸展树")]),v._v(" "),l("p",[v._v("当一个节点X被访问后，它就要经过一系列旋转被放到根上。相当于不需要保证平衡的AVL树")]),v._v(" "),l("ul",[l("li",[l("p",[v._v("展开（即旋转）")]),v._v(" "),l("ul",[l("li",[l("p",[v._v("1.如果X的父节点是树根，那么只要旋转X和树根")])]),v._v(" "),l("li",[l("p",[v._v("2.如果X的父节点不是树根，那么就存在祖父节点")]),v._v(" "),l("ul",[l("li",[l("p",[v._v("如果为之字形(zig-zag)：类似于AVL树的内部情况（即左-右或右-左）")]),v._v(" "),l("ul",[l("li",[v._v("我们进行一次AVL那样的双旋转")])])]),v._v(" "),l("li",[l("p",[v._v("如果为一字形(zig-zig)：类似于AVL树的外边情况(即左-左或右-右)")]),v._v(" "),l("ul",[l("li",[v._v("我们进行两次AVL那样的单旋转")])])])])]),v._v(" "),l("li",[l("p",[v._v("3.旋转至X为根节点时即结束")])])])]),v._v(" "),l("li",[l("p",[v._v("每次操作摊还时间复杂度O(logN)")])])])]),v._v(" "),l("li",[l("p",[v._v("红黑树")]),v._v(" "),l("ul",[l("li",[l("p",[v._v("性质")]),v._v(" "),l("ul",[l("li",[v._v("1.每一个节点或者是红色或者是黑色的")]),v._v(" "),l("li",[v._v("2.根是黑色的")]),v._v(" "),l("li",[v._v("3.如果一个节点是红色的，那么它的子节点必须是黑色的(也就是说黑色节点可以连续，红色节点不能连续)")]),v._v(" "),l("li",[v._v("4.从一个节点到一个NULL指针的每一条路径必须包含相同数目的黑色节点")])])]),v._v(" "),l("li",[l("p",[v._v("高度最多是2log(N+1)")])]),v._v(" "),l("li",[l("p",[v._v("插入规则")]),v._v(" "),l("ul",[l("li",[l("p",[v._v("1.通常在树叶位置插入")])]),v._v(" "),l("li",[l("p",[v._v("2.如果把插入的项设置为黑色肯定不行，因为这就违反了第4条，到null指针的每条路径必须有相同的黑色节点数，所以只能插入红色节点")])]),v._v(" "),l("li",[l("p",[v._v("3.如果在插入时，父节点是黑节点，那么插入没问题，如果父节点是红节点，那么就不能直接插入，因为红节点的子节点必须是黑色的，在这种情况下我们必须调整该树以确保满足条件，基本操作就是改变颜色和旋转")])]),v._v(" "),l("li",[l("p",[v._v("4.父节点是红节点的情况")]),v._v(" "),l("ul",[l("li",[l("p",[v._v("如果这个父节点的兄弟节点是黑的(我们约定NULL节点都是黑色的)，那么我们进行一字或者之字旋转")]),v._v(" "),l("ul",[l("li",[v._v("将新形成的子树的根节点涂成黑色，将被替换后的节点涂成红色，以保证路径上黑节点数量不变")])])]),v._v(" "),l("li",[l("p",[v._v("2.如果这个父节点的兄弟节点是红色的，那么我们不进行更改颜色，只进行旋转操作，旋转完后，将根节点的红色上滤")])])])])])])])])])]),v._v(" "),l("li",[l("p",[v._v("表达式树")]),v._v(" "),l("p",[v._v("一颗二叉树的叶子节点是数值，而根节点全是操作运算符")]),v._v(" "),l("ul",[l("li",[l("p",[v._v("遍历表达式树")]),v._v(" "),l("ul",[l("li",[l("p",[v._v("通过先序遍历可以得到前缀表达式")]),v._v(" "),l("p",[v._v("不太常用")])]),v._v(" "),l("li",[l("p",[v._v("通过后续遍历可以得到后缀表达式")])]),v._v(" "),l("li",[l("p",[v._v("通过中序遍历可以得到中缀表达式")])])])]),v._v(" "),l("li",[l("p",[v._v("构造一颗表达式树")]),v._v(" "),l("ul",[l("li",[l("p",[v._v("构造过程")]),v._v(" "),l("ul",[l("li",[v._v("1.我们一次一个符号地读入表达式")]),v._v(" "),l("li",[v._v("2.如果符号时操作数，那么我们就建立一个单节点树并将一个指向它的指针推入栈中")]),v._v(" "),l("li",[v._v("3.如果符号时操作符，那么我们就从栈中弹出指向两颗树的那两个指针并形成一颗新的树，该树的根就是操作符，它的左右儿子分别是弹出的那两个指针")]),v._v(" "),l("li",[v._v("4.然后将指向这颗新树的指针压入栈中")])])]),v._v(" "),l("li",[l("p",[v._v("例如将后缀表达式ab+cde+**构造成为一颗表达式树")]),v._v(" "),l("ul",[l("li",[v._v("1.a和b是操作数，因此我们创建两颗单节点树并将指向他们的指针压入栈中")]),v._v(" "),l("li",[v._v("2.接着读取到+号，因此将这两颗单节点树弹出，和+号操作符一起构造成为一颗三节点树，其中操作符为根节点，然后将指向根节点的指针压入栈中")]),v._v(" "),l("li",[v._v("3.然后将cde压入栈中")]),v._v(" "),l("li",[v._v("4.读取到+号，此时从栈顶弹出两个指针，和+号构造成为一颗二叉树(根节点为+号操作符)，然后将根节点指针压入栈中")]),v._v(" "),l("li",[v._v("5.读取到*号，又从栈顶弹出两个指针，构造二叉树，将根节点指针压入栈中")]),v._v(" "),l("li",[v._v("6.读取到*号，又从栈顶弹出两个指针，构造二叉树，将根节点指针压入栈中")])])])])])])]),v._v(" "),l("li",[l("p",[v._v("完全二叉树")]),v._v(" "),l("p",[v._v("高度为h的二叉树，除了高度为h的层没被填满之外，其它的层都被填满了，而且高度为h的层元素是从左到右填入的，这样的树称为完全二叉树，所以完全二叉树是平衡的。完全二叉树也叫做堆。不难看出，完全二叉树是逐层填充数据。")]),v._v(" "),l("ul",[l("li",[v._v("因为完全二叉树很有规律，所以它可以用一个数组表示，而不需要指针")])])])]),v._v(" "),l("h3",{attrs:{id:"多分树"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#多分树"}},[v._v("#")]),v._v(" 多分树")]),v._v(" "),l("ul",[l("li",[l("p",[v._v("平衡多分查找树")]),v._v(" "),l("ul",[l("li",[l("p",[v._v("B-树")]),v._v(" "),l("p",[v._v("对于M阶B-树。\n1.根节点的儿子数在2到M之间。\n2.其他节点的儿子数在M/2到M之间。\n3.叶子节点的深度相同\n4.值都存储在叶子节点上\n5.父节点会存储指向每个儿子的指针\n5.根节点和中间节点只会存储除第一颗子树外每颗子树的最小值，注意是每颗子树的最小值，而不是每个儿子的最小值，这是有区别的。")]),v._v(" "),l("ul",[l("li",[v._v("从树根往下查找，通过对比每个节点中的值，来判断通向哪个分支，对于每个节点中的查找，采用折半查找法，因为B-树是已排序的树")])])]),v._v(" "),l("li",[l("p",[v._v("B+树")])])])])]),v._v(" "),l("h2",{attrs:{id:"散列表-哈希表-adt"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#散列表-哈希表-adt"}},[v._v("#")]),v._v(" 散列表(哈希表)ADT")]),v._v(" "),l("p",[v._v("每个关键字被映射到从0到tableSize-1这个范围中的某个数，并且被放到适当的单元中，这个映射就叫做散列函数。")]),v._v(" "),l("p",[v._v("哈希表的长度有限，而关键字的数目是无限的，所以需要寻找一个散列函数，该函数要在单元之间均匀分配关键字")]),v._v(" "),l("p",[v._v("散列表以常数平均时间执行插入、删除和查找操作")]),v._v(" "),l("h3",{attrs:{id:"整数关键字"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#整数关键字"}},[v._v("#")]),v._v(" 整数关键字")]),v._v(" "),l("ul",[l("li",[v._v("散列函数通常是Key mod TableSize")])]),v._v(" "),l("h3",{attrs:{id:"字符串关键字"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#字符串关键字"}},[v._v("#")]),v._v(" 字符串关键字")]),v._v(" "),l("ul",[l("li",[v._v("散列函数可以是字符串的ASCII码值加起来，然后mod TableSize")])]),v._v(" "),l("h3",{attrs:{id:"哈希冲突解决方法"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#哈希冲突解决方法"}},[v._v("#")]),v._v(" 哈希冲突解决方法")]),v._v(" "),l("p",[v._v("如果当一个元素被插入处另一个元素已经存在（即哈希值相同），那么久产生一个冲突，这个冲突需要消除")]),v._v(" "),l("ul",[l("li",[l("p",[v._v("分离链接法")]),v._v(" "),l("ul",[l("li",[l("p",[v._v("将散列值相同的元素保留到一个表中，为方便起见，这些表都有表头。当然我们不仅可以使用链表来解决哈希冲突，还可以使用二叉查找树甚至另外一个哈希表均可胜任")]),v._v(" "),l("ul",[l("li",[v._v("所以执行一次查找所需的工作是计算散列函数值的常数时间加上遍历表所用的时间")])])]),v._v(" "),l("li",[l("p",[v._v("通常法则是让λ≈1")])])])]),v._v(" "),l("li",[l("p",[v._v("开放定址法")]),v._v(" "),l("ul",[l("li",[l("p",[v._v("如果有冲突发生，那么就要尝试选择另外的单元，如果一直到散列表尾都没有空单元，我们会从表头再开始选择，直到找出空的单元为止。那么如何去尝试选择另外的单元呢？这里有两种方法：")]),v._v(" "),l("ul",[l("li",[l("p",[v._v("线性探测法")]),v._v(" "),l("p",[v._v("即当发生冲突时，逐个探测每个单元，直到找到空单元为止。")]),v._v(" "),l("ul",[l("li",[v._v("缺点是占据的单元会形成一些区块，称为一次聚集，于是，散列到区块中的任何关键字都需要多次试选单元才能够解决冲突，然后该关键字才被添加到相应的区块中。")]),v._v(" "),l("li",[v._v("如果λ>0.5，那么线性探测就不是一个好的办法，因为需要探测的次数会随指数增长")])])]),v._v(" "),l("li",[l("p",[v._v("平方探测法")]),v._v(" "),l("p",[v._v("平方探测是消除线性探测中一次聚集问题的冲突解决方法。平方探测就是冲突函数为二次函数的探测方法。因为线性探测法是逐个探测每个单元然后填充，这会造成单元聚集，而平方探测不是线性的，所以不会逐个去探测每个单元，而是跳过某些单元去探测，如果线性探测函数是F(i)=i，那么平方探测函数则为F(i) = i^2。含义为：当进行第一次探测时，我们跨过1个元素进行探测，当进行第二次探测时，我们跨过4个元素进行探测，以此类推。")]),v._v(" "),l("ul",[l("li",[v._v("缺点：如果表的大小不是素数，那么就可能会发生探测不到空单元，因为平方数可能每次都定位到相同的一些单元")]),v._v(" "),l("li",[v._v("缺点2：虽然平方探测排除了一次聚集，但是散列到同一位置上的那些元素将探测相同的备选单元，这叫做二次聚集。")]),v._v(" "),l("li",[v._v("如果表的大小是素数，那么当表至少有一半空单元时，总能够插入一个新元素")])])]),v._v(" "),l("li",[l("p",[v._v("双散列")]),v._v(" "),l("p",[v._v("当发生冲突时，我们采用其他的哈希函数来进行探测，而不是线性探测或者是平方探测，这样的灵活性很高。通常一种流行的冲突函数时F(i) = i * hash(X)。这个公式的意思是将一个哈希函数运用到探测当中去，每探测一次，函数就跳过hash(X)的步长")])])])]),v._v(" "),l("li",[l("p",[v._v("装填因子λ应该低于0.5")])]),v._v(" "),l("li",[l("p",[v._v("标准的删除操作不能实施，因为相应的单元可能已经引起过冲突，冲突元素被存在了别处，如果删除了当前元素，那么进行find查找时无法查找到冲突元素，因此开放定址法需要懒惰删除（即只是标记为删除状态，并不是从内存当中删除）")])])])])]),v._v(" "),l("h3",{attrs:{id:"再散列"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#再散列"}},[v._v("#")]),v._v(" 再散列")]),v._v(" "),l("p",[v._v("当我们以开放定址法向散列表中插入元素时，如果新插入元素后发现表中元素的数量已经超过了一定量值（例如超过了表长的70%），那么我们就将表扩大一倍，并以扩大后的第一个素数为表的长度，然后再次通过新的散列函数进行全部重新插值")]),v._v(" "),l("ul",[l("li",[l("p",[v._v("实现策略")]),v._v(" "),l("ul",[l("li",[l("p",[v._v("一种做法是只要表满到一半就再散列")])]),v._v(" "),l("li",[l("p",[v._v("另一种极端的方法是只有当插入失败时才再散列")])]),v._v(" "),l("li",[l("p",[v._v("第三种方法即途中策略")]),v._v(" "),l("p",[v._v("当表到达某一个装填因子时进行再散列。由于随着装填因子的增加，表的性能的确有下降，因此以好的截止手段实现的第三种策略，可能是最好的策略。")])])])])]),v._v(" "),l("h3",{attrs:{id:"可扩散列"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#可扩散列"}},[v._v("#")]),v._v(" 可扩散列")]),v._v(" "),l("h3",{attrs:{id:"装填因子λ"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#装填因子λ"}},[v._v("#")]),v._v(" 装填因子λ")]),v._v(" "),l("p",[v._v("散列表中元素个数与散列表大小的比值")]),v._v(" "),l("h3",{attrs:{id:"编译器使用散列表跟踪源代码中声明的变量。这种数据结构叫做符号表"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#编译器使用散列表跟踪源代码中声明的变量。这种数据结构叫做符号表"}},[v._v("#")]),v._v(" 编译器使用散列表跟踪源代码中声明的变量。这种数据结构叫做符号表")]),v._v(" "),l("h2",{attrs:{id:"排序-2"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#排序-2"}},[v._v("#")]),v._v(" 排序")]),v._v(" "),l("h3",{attrs:{id:"内部排序"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#内部排序"}},[v._v("#")]),v._v(" 内部排序")]),v._v(" "),l("p",[v._v("在内存中进行")]),v._v(" "),l("ul",[l("li",[l("p",[v._v("不需要额外存储空间")]),v._v(" "),l("ul",[l("li",[l("p",[v._v("插入排序")]),v._v(" "),l("p",[v._v("从数组位置P开始取值，如果取得的值比前面已排序P-1位置的值小，那么将P-1位置的值往后移动，如果还比P-2位置的值小，那么继续移动P-2，直到找到一个合适，然后将位置P的值插入进去。接着取P+1、P+2.......N-1位置的值，依次插入前面的")]),v._v(" "),l("ul",[l("li",[v._v("时间复杂度O(N^2)")]),v._v(" "),l("li",[v._v("外层循环临界值：for (i = 1; i < N; i++)，表示从第一个数开始取值来插入")]),v._v(" "),l("li",[v._v("内循环临界值：for (j = i; j > 0 && *(a+j-1) > value; j--)，表示倒序遍历已排序的子数组，value比子数组中的数小时，就将每一个当前值往后移，直到找到合适的位置，退出内循环。")])])]),v._v(" "),l("li",[l("p",[v._v("希尔排序")]),v._v(" "),l("p",[v._v("希尔排序通过 比较相聚一定间隔的元素来工作；各趟比较所用的距离随着算法的进行而减小，直到只比较相邻元素的最后一趟排序为止。由于这个原因，希尔排序有时也叫做缩小增量排序。")]),v._v(" "),l("ul",[l("li",[v._v("希尔排序对于每一趟排序，是将后面的数通过插入排序的方式插入到各个独立的子数组当中。不拿看出插入排序是希尔排序的特例，只是插入排序的插值增量是1")]),v._v(" "),l("li",[v._v("外层循环：for (increment = N/2; increment>0; increment/=2)，表示从N/2的增量开始，逐渐减小增量进行遍历")]),v._v(" "),l("li",[v._v("中间循环：for (i=increment; i < N; i++)，表示从增量开始的位置从后面进行取值")]),v._v(" "),l("li",[v._v("内层循环：for (j = i; j-increment>=0 && value < A[j-increment] ; j-=increment)，表示当value小于已排序的子数组时，我们将子数组往后移，以便给新元素腾出位置")]),v._v(" "),l("li",[v._v("最坏情形时间复杂度θ(N^2)")]),v._v(" "),l("li",[v._v("对于Hibbard增量2^(k)-1，最坏情形时间复杂度为θ(N^1.5)")]),v._v(" "),l("li",[v._v("对于Sedgewick增量，最坏时间复杂度O(N^4/3)")])])]),v._v(" "),l("li",[l("p",[v._v("堆排序")]),v._v(" "),l("ul",[l("li",[v._v("时间复杂度O(NlogN)")]),v._v(" "),l("li",[v._v("一般的堆排序需要额外的存储空间，当然我们也可以采用小技巧，将在DeleteMin时，将该元素存放到堆的末尾位置，在最后一次DeleteMin之后，该数组将以递减的顺序包含所有元素，如果需要得到递增的顺序，那么我们使用大根堆即可")])])]),v._v(" "),l("li",[l("p",[v._v("快速排序")]),v._v(" "),l("ul",[l("li",[l("p",[v._v("平均时间复杂度O(NlogN)")])]),v._v(" "),l("li",[l("p",[v._v("最坏时间复杂度O(n^2)")])]),v._v(" "),l("li",[l("p",[v._v("过程")]),v._v(" "),l("ul",[l("li",[l("p",[v._v("1.从数组中选择一个枢纽元")]),v._v(" "),l("ul",[l("li",[l("p",[v._v("选择技巧")]),v._v(" "),l("ul",[l("li",[v._v("选择数组左边中间右边三个数中的一个(三个数的中间大小的值)作为枢纽元，并将枢纽元交换到数组最后")])])])])]),v._v(" "),l("li",[l("p",[v._v("2.将数组分割为两部分，左边部分比枢纽元小，右边部分比枢纽元大")]),v._v(" "),l("ul",[l("li",[v._v("首尾两个指针i和j，分别向中间遍历，当左边指针遇到比枢纽元大的元素时停止，当右边指针遇到比枢纽元小的元素时停止，然后交换两个指针所指向的值，继续遍历，直到左右指向相遇，则一次循环结束，然后将枢纽元交换到i最后指向的位置，此时i左边的元素是小元素，i右边的元素是大元素。")])])]),v._v(" "),l("li",[l("p",[v._v("3.采用递归的方式。将i左边的元素当做一个数组，将i右边的元素当做一个数组，进行递归调用")])]),v._v(" "),l("li",[l("p",[v._v("4.对于很小的数组(N<=20)，快速排序不如插入排序好，所以在递归到小数组时，我们可以切换成插入排序，使用这种策略实际上可以节省大约15%的运行时间，通常是在N=10时进行切换排序算法")])])])])])]),v._v(" "),l("li",[l("p",[v._v("快速选择")]),v._v(" "),l("ul",[l("li",[v._v("利用快速排序的思想，进行查找第k个最小元素")])])])])]),v._v(" "),l("li",[l("p",[v._v("需要额外存储空间")]),v._v(" "),l("ul",[l("li",[l("p",[v._v("归并排序")]),v._v(" "),l("ul",[l("li",[l("p",[v._v("最坏时间复杂度O(NlogN)")])]),v._v(" "),l("li",[l("p",[v._v("采用递归的思想，将原数组拆解成两个大小相等的数组，一直拆分下去，最后单个元素的数组肯定是有序的，然后将它们合并到一个数组当中，归并排序其实就是分治的策略")])]),v._v(" "),l("li",[l("p",[v._v("缺点")]),v._v(" "),l("ul",[l("li",[v._v("需要线性额外存储空间")]),v._v(" "),l("li",[v._v("需要将数据拷贝到临时数组，然后还要再拷贝回来，其结果严重放慢了排序的速度")])])])])]),v._v(" "),l("li",[l("p",[v._v("桶排序")]),v._v(" "),l("ul",[l("li",[v._v("将每个元素装到对应的桶内，然后再遍历桶数组，取出不为空的桶")])])])])])]),v._v(" "),l("h3",{attrs:{id:"外部排序"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#外部排序"}},[v._v("#")]),v._v(" 外部排序")]),v._v(" "),l("p",[v._v("在磁盘进行")]),v._v(" "),l("h2",{attrs:{id:"图论"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#图论"}},[v._v("#")]),v._v(" 图论")]),v._v(" "),l("h3",{attrs:{id:"图g-v-e"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#图g-v-e"}},[v._v("#")]),v._v(" 图G = (V, E)")]),v._v(" "),l("ul",[l("li",[v._v("由顶点和边组成")]),v._v(" "),l("li",[v._v("边是点对(v, w)")]),v._v(" "),l("li",[v._v("有序点对的图是有向图")]),v._v(" "),l("li",[v._v("路径是顶点序列")]),v._v(" "),l("li",[v._v("从一个顶点到它自身可以看成一条路径")]),v._v(" "),l("li",[v._v("从一个顶点到自身的边，叫做一个环，我们不讨论环的情况")]),v._v(" "),l("li",[v._v("如果路径上的所有顶点互异，那么称为简单路径")]),v._v(" "),l("li",[v._v("首尾顶点相同且长度至少为1的路径称为圈，如果是简单路径，那么称为简单圈，对于无向图(u,v)和(v,u)是同一条边，所以不是圈")]),v._v(" "),l("li",[v._v("有向无圈图称为DAG")]),v._v(" "),l("li",[v._v("在一个无向图中从每一个顶点到每个其他顶点都存在一条路径，则称该无向图是连通的。这种图示强连通的。")]),v._v(" "),l("li",[v._v("如果一个有向图不是强连通的，但是去掉方向后是连通的，那么该有向图称为弱连通的。")]),v._v(" "),l("li",[v._v("每一对顶点间都存在一条边的图称为完全图")])]),v._v(" "),l("h3",{attrs:{id:"表示方法"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#表示方法"}},[v._v("#")]),v._v(" 表示方法")]),v._v(" "),l("ul",[l("li",[v._v("邻接矩阵(二维数组)")]),v._v(" "),l("li",[v._v("邻接表")])]),v._v(" "),l("h3",{attrs:{id:"拓扑排序"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#拓扑排序"}},[v._v("#")]),v._v(" 拓扑排序")]),v._v(" "),l("p",[v._v("对有向无圈图的顶点的一种排序，它使得如果存在一条从vi到vj的路径，那么在排序中vj出现在vi的后面")]),v._v(" "),l("ul",[l("li",[l("p",[v._v("算法")]),v._v(" "),l("ul",[l("li",[v._v("先找出任意一个没有入边(只有出边，即只有指向其它顶点的顶点)，然后显示出该顶点，并将它和它的边一起从图中删除。依次对图中中其余部分应用同样的方法处理")])])])]),v._v(" "),l("h3",{attrs:{id:"最短路径算法"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#最短路径算法"}},[v._v("#")]),v._v(" 最短路径算法")]),v._v(" "),l("ul",[l("li",[l("p",[v._v("赋权路径长")])]),v._v(" "),l("li",[l("p",[v._v("无权路径长")])]),v._v(" "),l("li",[l("p",[v._v("无权最短路径算法")]),v._v(" "),l("ul",[l("li",[l("p",[v._v("广度优先搜索")]),v._v(" "),l("p",[v._v("该方法按层处理顶点：距开始点最近的那些顶点首先被赋值，而最远的那些顶点最后被赋值。这很像对树的层序遍历")]),v._v(" "),l("ul",[l("li",[v._v("1.选取某个顶点s作为输入参数")]),v._v(" "),l("li",[v._v("2.从s出发的所有顶点(v1和v6)距离s为1,所以到v1和v6最短路径长为1")]),v._v(" "),l("li",[v._v("3.从v1和v6出发的所有顶点(v2和v4)距离2")]),v._v(" "),l("li",[v._v("依次类推，依次找出所有顶点的最短路径")])])])])]),v._v(" "),l("li",[l("p",[v._v("有权算法")]),v._v(" "),l("ul",[l("li",[l("p",[v._v("Dijkstra算法")]),v._v(" "),l("ul",[l("li",[v._v("Dijkstra算法像无权最短路径算法一样，按阶段进行。在每个阶段，Dijkstra算法选择一个顶点v，它在所有未知顶点中具有最小的dv，同时算法声明从s到v的最短路径是已知的。阶段的其余部分由dw值的更新工作组成。")])])])])]),v._v(" "),l("li",[l("p",[v._v("松弛时间")]),v._v(" "),l("ul",[l("li",[v._v("表示对应动作可以被延迟而不推迟整体的完成时间量")])])]),v._v(" "),l("li",[l("p",[v._v("关键路径")]),v._v(" "),l("ul",[l("li",[v._v("至少存在一条完全由零松弛边组成的路径称为关键路径")])])])]),v._v(" "),l("h3",{attrs:{id:"最小生成树"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#最小生成树"}},[v._v("#")]),v._v(" 最小生成树")]),v._v(" "),l("ul",[l("li",[l("p",[v._v("一个无向图G的最小生成树就是由该图的那些连接G的所有顶点的边 构成的树，且其总价值最低。")])]),v._v(" "),l("li",[l("p",[v._v("构建最小生成树")]),v._v(" "),l("ul",[l("li",[l("p",[v._v("Prim算法")]),v._v(" "),l("p",[v._v("在每一步，都把一个节点当做根并往上加边，每一步把到每个节点的最小边添加到树中")])]),v._v(" "),l("li",[l("p",[v._v("Kruskal算法")]),v._v(" "),l("p",[v._v("连续地按照最小的权选择边，然后按照权值进行合并操作")])])])])]),v._v(" "),l("h3",{attrs:{id:"深度优先搜索"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#深度优先搜索"}},[v._v("#")]),v._v(" 深度优先搜索")]),v._v(" "),l("ul",[l("li",[v._v("我们从某个顶点v开始处理v，然后递归地遍历所有与v邻接的顶点")])]),v._v(" "),l("h3",{attrs:{id:"欧拉回路"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#欧拉回路"}},[v._v("#")]),v._v(" 欧拉回路")]),v._v(" "),l("ul",[l("li",[v._v("在图中找出一条路径，使得该路径对图的每条边恰好访问一次")]),v._v(" "),l("li",[v._v("对于起点终点相同的欧拉回路，其每个顶点的度(即边的条数)必须是偶数")]),v._v(" "),l("li",[v._v("如果恰好有两个顶点的度是奇数，那么当我们从一个奇数度的顶点出发，最后终止在另一个奇数的顶点时，仍然有可能得到一个欧拉环游")]),v._v(" "),l("li",[v._v("如果奇数度的顶点多余两个，那么欧拉环游是不可能存在的")]),v._v(" "),l("li",[v._v("所有顶点的度均为偶数的任何连通图必然有欧拉回路，我们还可以以线性时间找出这样一条回路")])]),v._v(" "),l("h2",{attrs:{id:"算法设计"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#算法设计"}},[v._v("#")]),v._v(" 算法设计")]),v._v(" "),l("h3",{attrs:{id:"贪婪算法"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#贪婪算法"}},[v._v("#")]),v._v(" 贪婪算法")]),v._v(" "),l("ul",[l("li",[l("p",[v._v("Dijkstra算法")])]),v._v(" "),l("li",[l("p",[v._v("Prim算法")])]),v._v(" "),l("li",[l("p",[v._v("Kruskal算法")])]),v._v(" "),l("li",[l("p",[v._v("哈夫曼编码")]),v._v(" "),l("ul",[l("li",[l("p",[v._v("性质")]),v._v(" "),l("ul",[l("li",[v._v("是一颗满树")]),v._v(" "),l("li",[v._v("字符存放在树叶上")]),v._v(" "),l("li",[v._v("出现频率高的字符离根节点最近")])])]),v._v(" "),l("li",[l("p",[v._v("哈夫曼算法")]),v._v(" "),l("ul",[l("li",[v._v("假设字符个数为C")]),v._v(" "),l("li",[v._v("算法对一个由树组成的森林进行。一棵树的权等于它的树叶的频率的和。任意选取最小权的两颗树T1和T2，并任意形成以T1和T2为子树的新树，将这样的过程进行C-1次。")])])])])])]),v._v(" "),l("h3",{attrs:{id:"分治-2"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#分治-2"}},[v._v("#")]),v._v(" 分治")]),v._v(" "),l("ul",[l("li",[v._v("分：递归解决较小的问题")]),v._v(" "),l("li",[v._v("治：从子问题的解构建原问题的解")])]),v._v(" "),l("h3",{attrs:{id:"动态规划"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#动态规划"}},[v._v("#")]),v._v(" 动态规划")]),v._v(" "),l("ul",[l("li",[v._v("如果编译器的递归模拟算法要是能够保留一个预先算出的值的表而对已经结果的子问题不再进行递归调用，那么算法将是高效的，动态规划也就是记录前值，一步步算出现在的值，而不是采用递归的方式进行循环调用")])]),v._v(" "),l("h3",{attrs:{id:"回溯"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#回溯"}},[v._v("#")]),v._v(" 回溯")]),v._v(" "),l("ul",[l("li",[v._v("对可能的解进行尝试，如果尝试失败，就退回到算法开始处")])]),v._v(" "),l("p",[l("em",[v._v("XMind - Trial Version")])])])}),[],!1,null,null,null);_.default=a.exports}}]);