(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{463:function(t,a,e){t.exports=e.p+"assets/img/内存布局.0b8631d3.png"},464:function(t,a,e){t.exports=e.p+"assets/img/SideTable.55a2c502.png"},465:function(t,a,e){t.exports=e.p+"assets/img/nonpointer_isa.8b6792bf.png"},466:function(t,a,e){t.exports=e.p+"assets/img/SideTables图解.a773caa4.png"},467:function(t,a,e){t.exports=e.p+"assets/img/SideTable图解.88d598b0.png"},468:function(t,a,e){t.exports=e.p+"assets/img/size_t.9609e21b.png"},469:function(t,a,e){t.exports=e.p+"assets/img/weak_table_t.e17047fa.png"},470:function(t,a,e){t.exports=e.p+"assets/img/dealloc.ce588ecb.png"},471:function(t,a,e){t.exports=e.p+"assets/img/object_dispose.638515d4.png"},472:function(t,a,e){t.exports=e.p+"assets/img/objc_destructInstance.049db1c4.png"},473:function(t,a,e){t.exports=e.p+"assets/img/clearDeallocating.8b12709e.png"},474:function(t,a,e){t.exports=e.p+"assets/img/weak_objc.21086483.png"},475:function(t,a,e){t.exports=e.p+"assets/img/initWeak.303e0ca5.png"},476:function(t,a,e){t.exports=e.p+"assets/img/weak_clear_no_lock.d49d8afa.png"},477:function(t,a,e){t.exports=e.p+"assets/img/objc_autoreleasePoolPush.6d86cdfa.png"},478:function(t,a,e){t.exports=e.p+"assets/img/objc_autoreleasePoolPop.58878e18.png"},479:function(t,a,e){t.exports=e.p+"assets/img/双向链表.8ffd80e3.png"},480:function(t,a,e){t.exports=e.p+"assets/img/栈.4da3a77e.png"},481:function(t,a,e){t.exports=e.p+"assets/img/AutoreleasePoolPage.fb0bfd63.png"},482:function(t,a,e){t.exports=e.p+"assets/img/AutoreleasePoolPage2.cd0d8b7c.png"},483:function(t,a,e){t.exports=e.p+"assets/img/AutoreleasePoolPagePush.77f19a1d.png"},484:function(t,a,e){t.exports=e.p+"assets/img/autorelease.2b2444f7.png"},485:function(t,a,e){t.exports=e.p+"assets/img/NSMutableArray释放时机.f7e8ac80.png"},486:function(t,a,e){t.exports=e.p+"assets/img/__weak.792fb125.png"},487:function(t,a,e){t.exports=e.p+"assets/img/block解决NSTimer循环引用.8b1a0dd0.png"},488:function(t,a,e){t.exports=e.p+"assets/img/NSProxy.ed6e76a5.png"},564:function(t,a,e){"use strict";e.r(a);var s=e(65),r=Object(s.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"内存管理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#内存管理"}},[t._v("#")]),t._v(" 内存管理")]),t._v(" "),s("h2",{attrs:{id:"内存布局"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#内存布局"}},[t._v("#")]),t._v(" 内存布局")]),t._v(" "),s("p",[s("img",{attrs:{src:e(463),alt:"内存布局"}}),t._v("\nstack：方法调用"),s("br"),t._v("\nheap：通过alloc等分配的对象"),s("br"),t._v("\nbss：未初始化的全局变量及静态变量等"),s("br"),t._v("\ndata：未初始化的全局变量及静态变量等"),s("br"),t._v("\ntext：程序代码")]),t._v(" "),s("h3",{attrs:{id:"各类型字符串的关系和存储方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#各类型字符串的关系和存储方式"}},[t._v("#")]),t._v(" 各类型字符串的关系和存储方式")]),t._v(" "),s("p",[t._v("内存地址由低到高分别为：程序区 -> 数据区 -> 堆区 -> 栈区,其中堆区分配内存地址从低往高分配，栈区分配内存从高往低分配")]),t._v(" "),s("p",[t._v("1.继承关系：\nNSTaggedPointerString(栈区) --\x3e NSString"),s("br"),t._v("\n__NSCFConstantString(数据常量区) --\x3e __NSCFString(堆区) --\x3e NSMutableString --\x3e NSString(最终父类)"),s("br"),t._v("\n2.对于NSStringFromClass()方法，字符串较短的class，系统会对其进行比较特殊的内存管理，NSObject字符串比较短，直接存储在栈区，类型为NSTaggedPointerString，不论你NSStringFromClass多少次，得到的都是同一个内存地址string；但对于较长的class，则为__NSCFString类型，而NSCFString存储在堆区，每次NSStringFromClass都会得到不同内存地址的string"),s("br"),t._v("\n3.__NSCFConstantString类型的字符串，存储在数据区，即使当前控制器被dealloc释放了，存在于这个控制器的该字符串所在内存仍然不会被销毁。通过快捷方式创建的字符串，无论字符串多长或者多短，都是__NSCFConstantString类型，存储在数据区。")]),t._v(" "),s("h2",{attrs:{id:"内存管理方案"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#内存管理方案"}},[t._v("#")]),t._v(" 内存管理方案")]),t._v(" "),s("p",[t._v("问1：iOS是怎样对内存进行管理的？"),s("br"),t._v("\n1.对于一些小的对象，比如较短的NSString，NSNumber采用TaggedPointer方案；无isa指针"),s("br"),t._v("\n2.64位系统下，对象类型采用NONPOINTER_ISA方案，就是说它的isa指针并不单单是一个指针，其中一些位仍旧编码指向类对象，还有其他的一些位去存储内存管理的信息，比如引用计数、是否被弱引用等等，isa是一个定义的联合体"),s("br"),t._v("\n3.散列表，散列表是一个hash数组，里面存储了很多个SideTable，散列表的hash键值就是一个对象的address，通过address映射出具体的SideTable，因此可以可以说一个obj，对应了一个SideTable。但是一个SideTable会对应多个obj，就像类跟对象的对应关系差不多。"),s("br"),t._v("\nSideTable图解："),s("br"),t._v(" "),s("img",{attrs:{src:e(464),alt:"SideTable"}})]),t._v(" "),s("h3",{attrs:{id:"对nonponinter-isa进行分析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#对nonponinter-isa进行分析"}},[t._v("#")]),t._v(" 对NONPONINTER_ISA进行分析")]),t._v(" "),s("p",[s("img",{attrs:{src:e(465),alt:"nonpointer_isa"}}),t._v("\n可以看到，x86_64和arm64下的位域定义是不一样的，不过都是占满了所有的64位（1+1+1+33+6+1+1+1+19 = 64，x86_64同理），下面来说明一下每一个位域参数的含义：\nnonpointer：表示是否对isa开启指针优化 。0代表是纯isa指针，1代表除了地址外，还包含了类的一些信息、对象的引用计数等。\nhas_assoc：关联对象标志位\nhas_cxx_dtor：该对象是否有C++或Objc的析构器，如果有析构函数，则需要做一些析构的逻辑处理，如果没有，则可以更快的释放对象\nshiftcls：存在类指针的值，开启指针优化的情况下，arm64位中有33位来存储类的指针\nmagic：判断当前对象是真的对象还是一段没有初始化的空间\nweakly_referenced：是否被指向或者曾经指向一个ARC的弱变量，没有弱引用的对象释放的更快\ndeallocating：是否正在释放\nhas_sidetable_rc：当对象引用计数大于10时，则需要进位\nextra_rc：表示该对象的引用计数值，实际上是引用计数减一。例如：如果引用计数为10，那么extra_rc为9。")]),t._v(" "),s("h3",{attrs:{id:"散列表方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#散列表方式"}},[t._v("#")]),t._v(" 散列表方式")]),t._v(" "),s("p",[s("img",{attrs:{src:e(466),alt:"SideTables图解"}}),t._v(" "),s("img",{attrs:{src:e(467),alt:"SideTable图解"}})]),t._v(" "),s("p",[t._v("问1：为什么不直接用一张SideTable，而是用SideTables去管理多个SideTable？"),s("br"),t._v("\nSideTable里有一个自旋锁，如果把所有的类都放在同一个SideTable，有任何一个类有改动都会对整个table做操作，并且在操作一个类的同时，操作别的类会被锁住等待，这样会导致操作效率和查询效率都很低。而有多个SideTable的话，操作的都是单个Table，并不会影响其他的table，这就是分离锁。\n问2：怎样实现快速分流？"),s("br"),t._v("\nSideTables的本质是一张Hash表，通过哈希查找找到对应的SideTable")]),t._v(" "),s("h3",{attrs:{id:"散列表相关的数据结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#散列表相关的数据结构"}},[t._v("#")]),t._v(" 散列表相关的数据结构")]),t._v(" "),s("p",[t._v("散列表由三部分组成：自旋锁、引用计数表、弱引用表"),s("br"),t._v("\n自旋锁spinlock_t："),s("br"),t._v("\nspinlock_t是“忙等”的锁。如果当前锁已被其他线程获取，当前线程会不断的探测锁是否被释放，如果被释放，第一时间去获取那个锁。适用于轻量访问。比如对引用计数进行加1减1操作是非常快的，我们可以使用自旋锁。"),s("br"),t._v("\n问1：自旋锁和普通的锁有什么区别？\n自旋锁是忙等的锁，适用于轻量访问。"),s("br"),t._v("\n引用计数表："),s("br"),t._v("\n通过哈希查找，找到对象的引用计数size_t。\n"),s("img",{attrs:{src:e(468),alt:"size_t"}}),t._v("\n弱引用表：\n也是一张哈希表\n"),s("img",{attrs:{src:e(469),alt:"weak_table_t"}})]),t._v(" "),s("h2",{attrs:{id:"mrc-arc"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mrc-arc"}},[t._v("#")]),t._v(" MRC&ARC")]),t._v(" "),s("p",[t._v("retain，release，retainCount，autorelease只在 mrc下才有。"),s("br"),t._v("\nalloc，dealloc在mrc和arc下都有"),s("br"),t._v("\nARC:\n编译器为我们在对应的位置插入retain/release操作，还需要runtime的功能进行支持。由编译器和runtime共同协作组成arc的全部功能。"),s("br"),t._v("\nARC禁止手动调用retain/release/retainCount/dealloc"),s("br"),t._v("\nARC新增weak/strong属性关键字")]),t._v(" "),s("h2",{attrs:{id:"引用计数管理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#引用计数管理"}},[t._v("#")]),t._v(" 引用计数管理")]),t._v(" "),s("p",[t._v("alloc实现：经过一系列调用，最终调用了C函数calloc。此时并没有设置引用计数为1，但是获取到的retainCount却是1，这是为何？因为在通过retainCount获取引用计数时，内部默认设置局部变量为1，再加上对象的引用计数，就是最终的结果。"),s("br"),t._v("\nretain实现：SideTable& table = SideTables()[this];"),s("br"),t._v("\nsize_t& refcntStorage = table.refcnts[this];"),s("br"),t._v("\nrefcntStorage += SIDE_TABLE_RC_ONE;"),s("br"),t._v("\n两次哈希"),s("br"),t._v("\nrelease实现：SideTable& table = SideTables()[this];"),s("br"),t._v("\nRefcountMap::iterator it = table.refcnts.find(this);"),s("br"),t._v("\nit->second -= SIDE_TABLE_RC_ONE;"),s("br"),t._v("\nretainCount实现：SideTable& table = SideTables()[this];"),s("br"),t._v("\nsize_t refcnt_result = 1;  //这里可以看出alloc之后为什么引用计数为1\nRefcountMap::iterator it = table.refcnts.find(this);"),s("br"),t._v("\nrefcnt_result += it->second >> SIDE_TABLE_RC_SHIFT;"),s("br"),t._v("\ndealloc实现："),s("br"),t._v(" "),s("img",{attrs:{src:e(470),alt:"dealloc"}}),t._v("\nobject_dispose()实现：\n"),s("img",{attrs:{src:e(471),alt:"object_dispose"}}),t._v("\nobjc_destructInstance()实现：\n"),s("img",{attrs:{src:e(472),alt:"objc_destructInstance"}}),t._v("\nclearDeallocating()实现：\n"),s("img",{attrs:{src:e(473),alt:"clearDeallocating"}})]),t._v(" "),s("h2",{attrs:{id:"弱引用管理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#弱引用管理"}},[t._v("#")]),t._v(" 弱引用管理")]),t._v(" "),s("p",[t._v("思考：weak变量是怎样被添加到弱引用表当中的？\n例如：\n"),s("img",{attrs:{src:e(474),alt:"weak_objc"}}),t._v(" "),s("img",{attrs:{src:e(475),alt:"initWeak"}}),t._v("\n一个被声明为__weak的对象指针，经过编译器的编译之后调用objc_initWeak()，然后经过一系列的函数调用栈，最终在weak_register_no_lock函数当中进行弱引用变量的添加，具体添加的位置是通过哈希算法进行位置查找的，如果说我们查找对应位置当中已经有了这个当前对象所对应的弱引用数组，我们就把新的弱引用变量添加到这个数组当中，如果没有，我们就创建一个弱引用数组，然后把第0个位置添加我们最新的weak指针，后面的初始化为nil。"),s("br"),t._v("\n思考2：当一个对象被释放或者废弃之后，weak变量是怎样处理的？\n调用dealloc()时，内部经过一系列的调用，最终调用弱引用清除函数weak_clear_no_lock()，函数内部根据当前对象指针查找弱引用表，把当前对象相对应的弱引用拿出来，是一个数组，遍历这个数组中的所有弱引用指针，分别置为nil。\n"),s("img",{attrs:{src:e(476),alt:"weak_clear_no_lock"}})]),t._v(" "),s("h2",{attrs:{id:"自动释放池"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#自动释放池"}},[t._v("#")]),t._v(" 自动释放池")]),t._v(" "),s("p",[t._v("编译器会将@autoreleasepool{}改写为：")]),t._v(" "),s("div",{staticClass:"language-C extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[t._v("  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("ctx "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("objc_autoreleasePoolPush")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("中的代码\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("objc_autoreleasePoolPop")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ctx"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("objc_autoreleasePoolPush内部实现：调用void* AutoreleasePoolPage:push(void)这个c++方法\n"),s("img",{attrs:{src:e(477),alt:"objc_autoreleasePoolPush"}}),t._v("\nobjc_autoreleasePoolPop内部实现：调用void* AutoreleasePoolPage:pop(void* ctxt)这个c++方法\n"),s("img",{attrs:{src:e(478),alt:"objc_autoreleasePoolPop"}}),t._v("\n一次pop实际上相当于一次批量的pop操作，怎么理解呢？"),s("br"),t._v("\n也就是说{}括号中的对象都会进行一次pop操作")]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("autoreleasePool的实现原理是怎样的？"),s("br"),t._v("\n自动释放池实际上是以栈为节点，通过双向链表的形式组合而成的数据结构。是和线程一一对应的。"),s("br"),t._v("\nautoreleasePool释放时机？"),s("br"),t._v("\n主线程：系统已经为我们创建了runloop和全局autoreleasePool，全局的autoreleasePool作用于整个app内非自己创建的对象和__autoreleaseing对象，系统监听到runloop即将进入休眠或者退出时，会自动释放内存；如果我们自己使用@autoreleasePool，则在每次@autoreleasePool结束时释放。\n子线程：NSOperation/NSThread/GCD均会创建autoreleasePool，其他方式的线程不能保证。\n双向链表结构：\n"),s("img",{attrs:{src:e(479),alt:"双向链表"}}),t._v("\n栈结构：\n"),s("img",{attrs:{src:e(480),alt:"栈"}}),t._v("\nAutoreleasePoolPage：\n"),s("img",{attrs:{src:e(481),alt:"AutoreleasePoolPage"}}),t._v(" "),s("img",{attrs:{src:e(482),alt:"AutoreleasePoolPage2"}}),t._v(" "),s("img",{attrs:{src:e(483),alt:"AutoreleasePoolPagePush"}}),t._v("\n调用[obj autorelease]的实现：\n"),s("img",{attrs:{src:e(484),alt:"autorelease"}}),t._v("\nAutoreleasePoolPage::pop实现："),s("br"),t._v("\n1.根据传入的哨兵对象找到对应位置；"),s("br"),t._v("\n2.给上次push操作之后添加的对象一次发送release消息"),s("br"),t._v("\n3.回退next指针到正确位置。"),s("br"),t._v("\nautoreleasePool的使用场景："),s("br"),t._v("\n1.写基于命令行的程序时，就是没有UI框架，如AppKit等Cocoa框架时。"),s("br"),t._v("\n2.写循环，循环里面包含了大量临时创建的对象。"),s("br"),t._v("\n3.创建了新的线程。（非Cocoa程序创建线程时才需要）"),s("br"),t._v("\n4.长时间在后台运行的任务")]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("问1："),s("img",{attrs:{src:e(485),alt:"NSMutableArray释放时机"}}),t._v("\n问2：autoreleasePool为何可以嵌套使用？"),s("br"),t._v("\n多层嵌套就是多次插入哨兵对象。\n问3：autoreleasePool使用场景？"),s("br"),t._v("\n在for循环中alloc图片数据等内存消耗较大的场景手动插入autoreleasePool。")]),t._v(" "),s("h2",{attrs:{id:"循环引用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#循环引用"}},[t._v("#")]),t._v(" 循环引用")]),t._v(" "),s("p",[t._v("问1：循环引用的种类？")]),t._v(" "),s("ol",[s("li",[t._v("自循环引用  A.obj = A")]),t._v(" "),s("li",[t._v("相互循环引用")]),t._v(" "),s("li",[t._v("多循环引用")])]),t._v(" "),s("p",[t._v("循环引用考点：")]),t._v(" "),s("ul",[s("li",[t._v("代理")]),t._v(" "),s("li",[t._v("Block")]),t._v(" "),s("li",[t._v("NSTimer")]),t._v(" "),s("li",[t._v("大环引用")])]),t._v(" "),s("p",[t._v("如何破除循环引用？")]),t._v(" "),s("ul",[s("li",[t._v("避免产生循环引用")]),t._v(" "),s("li",[t._v("在合适的时机手动断环")])]),t._v(" "),s("p",[t._v("具体解决方案？")]),t._v(" "),s("ul",[s("li",[t._v("__weak")]),t._v(" "),s("li",[t._v("__block")]),t._v(" "),s("li",[t._v("__unsafe_unretained")])]),t._v(" "),s("p",[s("img",{attrs:{src:e(486),alt:"__weak"}}),t._v("\n在MRC下，__block修饰的对象不会增加其引用计数，避免了循环引用。"),s("br"),t._v("\n在ARC下，__block修饰的对象会被强引用，无法避免循环引用，需要手动解环。"),s("br"),t._v("\n__unsafe_unretained修饰的对象不会增加其引用计数，避免了循环引用。如果被修饰对象在某一时机被释放，会产生野指针。")]),t._v(" "),s("p",[t._v("问2：你在实际开发过程中是否遇到过循环引用？你是怎样解决循环引用的？")]),t._v(" "),s("ul",[s("li",[t._v("Block循环引用")]),t._v(" "),s("li",[t._v("NSTimer循环引用")])]),t._v(" "),s("p",[t._v("NSTimer的循环引用问题："),s("br"),t._v("\n类有一个成员变量_timer，timer的target由强引用了这个类本身，就会出现循环引用，最后导致无法正确释放。解决这个问题的方式也很简单，当类的使用者能够确定不需要使用这个定时器时，调用[timer invalidate]和timer = nil即可，但是这种依赖于开发者手动调用方法才能让内存正确释放的方式不是一个好的处理方式。"),s("br"),t._v("\n解决NSTimer循环引用的方法由三种：")]),t._v(" "),s("ul",[s("li",[t._v("使用block方法")]),t._v(" "),s("li",[t._v("使用weakProxy")])]),t._v(" "),s("p",[t._v("block方式：\n"),s("img",{attrs:{src:e(487),alt:"block解决NSTimer循环引用"}}),t._v("\nweakProxy方式：\n"),s("img",{attrs:{src:e(488),alt:"NSProxy"}})])])}),[],!1,null,null,null);a.default=r.exports}}]);