(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{525:function(t,a,s){t.exports=s.p+"assets/img/lock_benchmark.06c86ccb.png"},576:function(t,a,s){"use strict";s.r(a);var n=s(65),r=Object(n.a)({},(function(){var t=this,a=t.$createElement,n=t._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"线程锁"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#线程锁"}},[t._v("#")]),t._v(" 线程锁")]),t._v(" "),n("h2",{attrs:{id:"临界区"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#临界区"}},[t._v("#")]),t._v(" 临界区")]),t._v(" "),n("p",[t._v("指的是一块对公共资源进行访问的代码，并非一种截止或是算法。")]),t._v(" "),n("h2",{attrs:{id:"互斥锁-mutexlock"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#互斥锁-mutexlock"}},[t._v("#")]),t._v(" 互斥锁（mutexlock）")]),t._v(" "),n("p",[t._v("最常使用于线程同步的锁；标记用来保证在任一时刻，只能有一个线程访问该对象，同一线程多次加锁操作会造成死锁；临界区和互斥量都可用来实现此锁，通常情况下锁操作失败会将该线程睡眠等待锁释放时被唤醒")]),t._v(" "),n("h2",{attrs:{id:"自旋锁-spinlock"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#自旋锁-spinlock"}},[t._v("#")]),t._v(" 自旋锁(spinlock)")]),t._v(" "),n("p",[t._v("同样用来标记只能有一个线程访问该对象，在同一线程多次加锁操作会造成死锁；使用硬件提供的swap指令或test_and_set指令实现；同互斥锁不同的是在锁操作需要等待的时候并不是睡眠等待唤醒，而是循环检测保持者已经释放了锁，这样做的好处是节省了线程从睡眠状态到唤醒之间内核会产生的消耗，在加锁时间短暂的环境下这点会提高很大效率")]),t._v(" "),n("h2",{attrs:{id:"读写锁-rwlock"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#读写锁-rwlock"}},[t._v("#")]),t._v(" 读写锁(rwlock)")]),t._v(" "),n("p",[t._v("高级别锁，区分读和写，符合条件时允许多个线程访问对象。处于读锁操作时可以允许其他线程和本线程的读锁， 但不允许写锁， 处于写锁时则任何锁操作都会睡眠等待；常见的操作系统会在写锁等待时屏蔽后续的读锁操作以防写锁被无限孤立而等待，在操作系统不支持情况下可以用引用计数加写优先等待来用互斥锁实现。 读写锁适用于大量读少量写的环境，但由于其特殊的逻辑使得其效率相对普通的互斥锁和自旋锁要慢一个数量级；值得注意的一点是按POSIX标准 在线程申请读锁并未释放前本线程申请写锁是成功的，但运行后的逻辑结果是无法预测\n。")]),t._v(" "),n("h2",{attrs:{id:"信号量-sempahore"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#信号量-sempahore"}},[t._v("#")]),t._v(" 信号量(sempahore)")]),t._v(" "),n("p",[t._v("是一种更高级的同步机制，互斥锁可以说是semaphore在仅取值0/1时的特例。信号量可以有更多的取值空间，用来实现更加复杂的同步，而不单单是线程间互斥。")]),t._v(" "),n("h2",{attrs:{id:"递归锁-recursivelock"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#递归锁-recursivelock"}},[t._v("#")]),t._v(" 递归锁(recursivelock)")]),t._v(" "),n("p",[t._v("严格上讲递归锁只是互斥锁的一个特例，同样只能有一个线程访问该对象，但允许同一个线程在未释放其拥有的锁时反复对该锁进行加锁操作； windows下的临界区默认是支持递归锁的，而linux下的互斥量则需要设置参数PTHREAD_MUTEX_RECURSIVE_NP，默认则是不支持")]),t._v(" "),n("h2",{attrs:{id:"优先级反转"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#优先级反转"}},[t._v("#")]),t._v(" 优先级反转")]),t._v(" "),n("ol",[n("li",[t._v("什么是优先级反转(Priority Inversion)\n由于多进程共享资源，具有最高优先权的进程被低优先级进程阻塞，反而使具有中优先级的进程先于高优先级的进程执行，导致系统的崩溃。这就是所谓的优先级反转(Priority Inversion)。")]),t._v(" "),n("li",[t._v("产生原因\n其实,优先级反转是在高优级(假设为A)的任务要访问一个被低优先级任务(假设为C)占有的资源时,被阻塞.而此时又有优先级高于占有资源的任务(C)而低于被阻塞的任务(A)的优先级的任务(假设为B)时,于是,占有资源的任务就被挂起(占有的资源仍为它占有),因为占有资源的任务优先级很低,所以,它可能一直被另外的任务挂起.而它占有的资源也就一直不能释放,这样,引起任务A一直没办法执行.而比它优先低的任务却可以执行.")])]),t._v(" "),n("h2",{attrs:{id:"锁的种类"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#锁的种类"}},[t._v("#")]),t._v(" 锁的种类")]),t._v(" "),n("ul",[n("li",[t._v("@synchronized")]),t._v(" "),n("li",[t._v("atomic")]),t._v(" "),n("li",[t._v("OSSpinLock：自旋锁，忙等的锁，内部一直在do while循环。")]),t._v(" "),n("li",[t._v("os_unfair_lock")]),t._v(" "),n("li",[t._v("NSRecursiveLock")]),t._v(" "),n("li",[t._v("NSLock")]),t._v(" "),n("li",[t._v("dispatch_semaphore_t")]),t._v(" "),n("li",[t._v("NSConditionLock")]),t._v(" "),n("li",[t._v("NSCondition")]),t._v(" "),n("li",[t._v("pthread_mutex")])]),t._v(" "),n("h2",{attrs:{id:"性能"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#性能"}},[t._v("#")]),t._v(" 性能")]),t._v(" "),n("p",[n("img",{attrs:{src:s(525),alt:"lock_benchmark"}})]),t._v(" "),n("h3",{attrs:{id:"synchronized-递归锁"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#synchronized-递归锁"}},[t._v("#")]),t._v(" @synchronized（递归锁）")]),t._v(" "),n("p",[t._v('@synchronized(obj) {\nNSLog(@"1st sync");\n@synchronized(obj) {\nNSLog(@"2nd sync");\n}\n}\nsynchronized中传入的object的内存地址，被用作key，通过hash map对应的一个系统维护的递归锁。'),n("br"),t._v("\n如果object被外部访问变化，则就失去了锁的作用。所以最好本类声明一个对象属性来当做key。"),n("br"),t._v("\n一般用来创建单例")]),t._v(" "),n("h3",{attrs:{id:"atomic"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#atomic"}},[t._v("#")]),t._v(" atomic")]),t._v(" "),n("p",[t._v("修饰属性关键字"),n("br"),t._v("\natomic所说的线程安全只是保证了getter和setter存取方法的线程安全，并不能保证整个对象是线程安全的。")]),t._v(" "),n("h3",{attrs:{id:"osspinlock-自旋锁"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#osspinlock-自旋锁"}},[t._v("#")]),t._v(" OSSpinLock（自旋锁）")]),t._v(" "),n("p",[t._v("循环等待访问，不释放当前资源。所以不会让出时间片。"),n("br"),t._v("\n会发生优先级反转，已经被标记为Deprecated，iOS10之后提供了新的os_unfair_lock作为OSSpinLock的替代。")]),t._v(" "),n("h3",{attrs:{id:"nslock-互斥锁"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#nslock-互斥锁"}},[t._v("#")]),t._v(" NSLock（互斥锁）")]),t._v(" "),n("p",[t._v("最简单的互斥锁")]),t._v(" "),n("h3",{attrs:{id:"os-unfair-lock-互斥锁"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#os-unfair-lock-互斥锁"}},[t._v("#")]),t._v(" os_unfair_lock（互斥锁）")]),t._v(" "),n("p",[t._v("os_unfair_lock是苹果官方推荐的替换OSSpinLock的方案，但是它在iOS10以上的系统才可以调用。os_unfair_lock是一种互斥锁，他不会像自旋锁那样忙等，而是等待线程会休眠。")]),t._v(" "),n("div",{staticClass:"language-C extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[t._v("    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//#import <os/lock.h>")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 初始化")]),t._v("\n    os_unfair_lock lock "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" OS_UNFAIR_LOCK_INIT"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//尝试加锁")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("os_unfair_lock_trylock")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("lock"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 加锁")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("os_unfair_lock_lock")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("lock"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 解锁")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("os_unfair_lock_unlock")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("lock"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("h3",{attrs:{id:"pthread-rwlock-读写锁-又称共享-互斥锁"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#pthread-rwlock-读写锁-又称共享-互斥锁"}},[t._v("#")]),t._v(" pthread_rwlock（读写锁，又称共享-互斥锁）")]),t._v(" "),n("p",[t._v("读锁是共享锁，可以多个一起，写锁是独占锁排它锁，同时只允许一个线程。")]),t._v(" "),n("div",{staticClass:"language-C extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//#import <pthread.h>")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//声明读写锁")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("pthread_rwlock_t")]),t._v(" rwlock"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//初始化")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("pthread_rwlock_init")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("rwlock"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//加读锁")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("pthread_rwlock_rdlock")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("rwlock"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//尝试加读锁，一旦该线程有读写阻断，那么该方法就失败")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("pthread_rwlock_tryrdlock")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("rwlock"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//加写锁")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("pthread_rwlock_wrlock")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("rwlock"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//尝试加写锁，一旦该线程有读写阻断，那么该方法就失败")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("pthread_rwlock_trywrlock")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("rwlock"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//解锁")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("pthread_rwlock_unlock")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("rwlock"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("h3",{attrs:{id:"nsrecursivelock-递归锁"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#nsrecursivelock-递归锁"}},[t._v("#")]),t._v(" NSRecursiveLock（递归锁）")]),t._v(" "),n("p",[t._v("递归锁有一个特点，就是同一个线程可以加锁N次而不会引发死锁。")]),t._v(" "),n("h3",{attrs:{id:"nscondition-条件锁"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#nscondition-条件锁"}},[t._v("#")]),t._v(" NSCondition（条件锁）")]),t._v(" "),n("p",[t._v("遵循NSLocking协议，使用的时候同样是lock,unlock加解锁，wait是傻等，waitUntilDate:方法是等一会，都会阻塞掉线程，signal是唤起一个在等待的线程，broadcast是广播全部唤起。")]),t._v(" "),n("div",{staticClass:"language-C extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[t._v("NSConditon "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("condition "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("NSCondition alloc"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("init"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("condition lock"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//一般用于多线程同时访问、修改同一个数据源，保证在同一时间内数据源只被访问、修改一次，其他线程的命令需要在lock 外等待，只到unlock ，才可访问")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("condition unlock"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//与lock 同时使用[condition wait];//让当前线程处于等待状态")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("condition signal"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//CPU发信号告诉线程不用在等待，可以继续执行")]),t._v("\n")])])]),n("h3",{attrs:{id:"nsconditionlock-条件锁"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#nsconditionlock-条件锁"}},[t._v("#")]),t._v(" NSConditionLock （条件锁）")]),t._v(" "),n("p",[t._v("跟NSCondition一样，只不过自带条件变量。")]),t._v(" "),n("h3",{attrs:{id:"dispatch-semaphore-t"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#dispatch-semaphore-t"}},[t._v("#")]),t._v(" dispatch_semaphore_t")]),t._v(" "),n("ol",[n("li",[t._v("dispatch_semaphore_create：创建一个Semaphore并初始化信号的总量")]),t._v(" "),n("li",[t._v("dispatch_semaphore_signal：发送一个信号，让信号总量加1")]),t._v(" "),n("li",[t._v("dispatch_semaphore_wait：可以使总信号量减1，当信号总量为0时就会一直等待（阻塞所在线程），否则就可以正常执行。")])]),t._v(" "),n("p",[t._v("wait阻塞是一个主动行为，唤醒是一个被动行为")])])}),[],!1,null,null,null);a.default=r.exports}}]);