(window.webpackJsonp=window.webpackJsonp||[]).push([[74],{616:function(_,a,r){"use strict";r.r(a);var e=r(65),t=Object(e.a)({},(function(){var _=this,a=_.$createElement,r=_._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[r("h1",{attrs:{id:"音视频开发"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#音视频开发"}},[_._v("#")]),_._v(" 音视频开发")]),_._v(" "),r("h2",{attrs:{id:"加载纹理"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#加载纹理"}},[_._v("#")]),_._v(" 加载纹理")]),_._v(" "),r("h3",{attrs:{id:"_1-创建纹理对象"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-创建纹理对象"}},[_._v("#")]),_._v(" 1.创建纹理对象")]),_._v(" "),r("ul",[r("li",[_._v("glGenTextures")])]),_._v(" "),r("h3",{attrs:{id:"_2-绑定纹理对象"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-绑定纹理对象"}},[_._v("#")]),_._v(" 2.绑定纹理对象")]),_._v(" "),r("ul",[r("li",[r("p",[_._v("glBindTexture(GL_TEXTURE_2D, textid)")]),_._v(" "),r("ul",[r("li",[_._v("对应的解绑纹理对象glBindTexture(GL_TEXTURE_2D, 0);")])])])]),_._v(" "),r("h3",{attrs:{id:"_3-设置纹理的填充方式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-设置纹理的填充方式"}},[_._v("#")]),_._v(" 3.设置纹理的填充方式")]),_._v(" "),r("ul",[r("li",[r("p",[_._v("magnification(放大)")]),_._v(" "),r("ul",[r("li",[_._v("glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR)")])])]),_._v(" "),r("li",[r("p",[_._v("minification(缩小)")]),_._v(" "),r("ul",[r("li",[_._v("glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR)")])])])]),_._v(" "),r("h3",{attrs:{id:"_4-设置纹理的环绕方式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4-设置纹理的环绕方式"}},[_._v("#")]),_._v(" 4.设置纹理的环绕方式")]),_._v(" "),r("ul",[r("li",[r("p",[_._v("S轴")]),_._v(" "),r("ul",[r("li",[r("p",[_._v("glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE)")]),_._v(" "),r("p",[_._v("GL_CLAMP_TO_EDGE超出(0,1)的范围设置为边界环绕方式")])])])]),_._v(" "),r("li",[r("p",[_._v("T轴")]),_._v(" "),r("ul",[r("li",[_._v("glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE)")])])])]),_._v(" "),r("h3",{attrs:{id:"_5-解码素材"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_5-解码素材"}},[_._v("#")]),_._v(" 5.解码素材")]),_._v(" "),r("p",[_._v("OpenGL大部分纹理一般都只接受RGBA类型的数据，解码后记为uint8_t数组类型的pixels")]),_._v(" "),r("h3",{attrs:{id:"_6-加载素材"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_6-加载素材"}},[_._v("#")]),_._v(" 6.加载素材")]),_._v(" "),r("ul",[r("li",[_._v("glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, width, height, 0, GL_RGBA, GL_UNSIGNED_BYTE, pixels)")])]),_._v(" "),r("h3",{attrs:{id:"_7-传递给着色器"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_7-传递给着色器"}},[_._v("#")]),_._v(" 7.传递给着色器")]),_._v(" "),r("ul",[r("li",[_._v("glActiveTexture(GL_TEXTURE0)")]),_._v(" "),r("li",[_._v("glBindTexture(GL_TEXTURE_2D, texId)")]),_._v(" "),r("li",[_._v("glUniform1i(mGLUniformTexture, 0)")])]),_._v(" "),r("h3",{attrs:{id:"_8-执行绘制操作"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_8-执行绘制操作"}},[_._v("#")]),_._v(" 8.执行绘制操作")]),_._v(" "),r("ul",[r("li",[_._v("glDrawArray(GL_TRIANGLE_STRIP, 0, 4);")])]),_._v(" "),r("h3",{attrs:{id:"_9-删除纹理"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_9-删除纹理"}},[_._v("#")]),_._v(" 9.删除纹理")]),_._v(" "),r("ul",[r("li",[_._v("glDeleteTextures(1, &texId)")])]),_._v(" "),r("h2",{attrs:{id:"帧缓冲区"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#帧缓冲区"}},[_._v("#")]),_._v(" 帧缓冲区")]),_._v(" "),r("p",[_._v("保存了图形硬件为了控制屏幕上所有像素的颜色和强度所需要的全部信息")]),_._v(" "),r("h2",{attrs:{id:"渲染管线阶段"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#渲染管线阶段"}},[_._v("#")]),_._v(" 渲染管线阶段")]),_._v(" "),r("h3",{attrs:{id:"_1-指定几何对象"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-指定几何对象"}},[_._v("#")]),_._v(" 1.指定几何对象")]),_._v(" "),r("ul",[r("li",[r("p",[_._v("glDrawArrays")]),_._v(" "),r("ul",[r("li",[r("p",[_._v("GL_POINTS")]),_._v(" "),r("p",[_._v("以点的形式进行绘制，通常用在绘制粒子效果的场景中")])]),_._v(" "),r("li",[r("p",[_._v("GL_LINES")]),_._v(" "),r("p",[_._v("以线的形式进行绘制，通常用在绘制直线的场景中")])]),_._v(" "),r("li",[r("p",[_._v("GL_TRIANGLE_STRIP")]),_._v(" "),r("p",[_._v("以三角形的形式进行绘制，所有二维图像的渲染都会使用这种方式")])])])])]),_._v(" "),r("h3",{attrs:{id:"_2-顶点处理"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-顶点处理"}},[_._v("#")]),_._v(" 2.顶点处理")]),_._v(" "),r("ul",[r("li",[_._v("输出gl_Position")]),_._v(" "),r("li",[_._v("如果以点(GL_POINTS)来绘制几何图元，还应该输出gl_PointSize")])]),_._v(" "),r("h3",{attrs:{id:"_3-图元组装"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-图元组装"}},[_._v("#")]),_._v(" 3.图元组装")]),_._v(" "),r("ul",[r("li",[_._v("根据顶点坐标将纹理组装成图元")])]),_._v(" "),r("h3",{attrs:{id:"_4-格栅化操作"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4-格栅化操作"}},[_._v("#")]),_._v(" 4.格栅化操作")]),_._v(" "),r("ul",[r("li",[_._v("插值计算每个片元对应的颜色、纹理坐标等属性")])]),_._v(" "),r("h3",{attrs:{id:"_5-片元处理"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_5-片元处理"}},[_._v("#")]),_._v(" 5.片元处理")]),_._v(" "),r("ul",[r("li",[_._v("输出gl_FragColor")])]),_._v(" "),r("h3",{attrs:{id:"_6-帧缓冲操作"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_6-帧缓冲操作"}},[_._v("#")]),_._v(" 6.帧缓冲操作")]),_._v(" "),r("ul",[r("li",[_._v("将最终的像素值写入到帧缓冲区")])]),_._v(" "),r("h2",{attrs:{id:"glfinish和glflush"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#glfinish和glflush"}},[_._v("#")]),_._v(" glFinish和glFlush")]),_._v(" "),r("p",[_._v("绘图指令并不会马上发送给图形硬件执行，而是放到一个缓冲区里面，等待缓冲区满了之后再将这些指令发送给图形硬件执行。")]),_._v(" "),r("h3",{attrs:{id:"glflush"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#glflush"}},[_._v("#")]),_._v(" glFlush")]),_._v(" "),r("ul",[r("li",[_._v("将缓冲区中的指令立刻发送到图形硬件执行，发送完立即返回")])]),_._v(" "),r("h3",{attrs:{id:"glfinish"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#glfinish"}},[_._v("#")]),_._v(" glFinish")]),_._v(" "),r("ul",[r("li",[_._v("将缓冲区的指令立即发送给图形硬件执行，但是要等待图形硬件执行完成之后才返回这些指令")])]),_._v(" "),r("h2",{attrs:{id:"glsl"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#glsl"}},[_._v("#")]),_._v(" GLSL")]),_._v(" "),r("h3",{attrs:{id:"类型"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#类型"}},[_._v("#")]),_._v(" 类型")]),_._v(" "),r("ul",[r("li",[r("p",[_._v("const")]),_._v(" "),r("p",[_._v("用于声明非可写的编译时常量变量")])]),_._v(" "),r("li",[r("p",[_._v("attribute")]),_._v(" "),r("p",[_._v("用于经常更改的信息，只能在顶点着色器中使用")])]),_._v(" "),r("li",[r("p",[_._v("uniform")]),_._v(" "),r("p",[_._v("用于不经常更改的信息，可用于顶点着色器和片元着色器")])]),_._v(" "),r("li",[r("p",[_._v("varying")]),_._v(" "),r("p",[_._v("用于修饰从顶点着色器向片元着色器传递的变量")])]),_._v(" "),r("li",[r("p",[_._v("highp")]),_._v(" "),r("p",[_._v("32bit，一般用于顶点坐标")])]),_._v(" "),r("li",[r("p",[_._v("medium")]),_._v(" "),r("p",[_._v("16bit，一般用于纹理坐标")])]),_._v(" "),r("li",[r("p",[_._v("lowp")]),_._v(" "),r("p",[_._v("一般用于颜色表示")])]),_._v(" "),r("li",[r("p",[_._v("vec4")])]),_._v(" "),r("li",[r("p",[_._v("mat4")])])]),_._v(" "),r("h3",{attrs:{id:"常用函数"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#常用函数"}},[_._v("#")]),_._v(" 常用函数")]),_._v(" "),r("ul",[r("li",[_._v("glUniformMatrix4fv")]),_._v(" "),r("li",[_._v("glUniform1i")])]),_._v(" "),r("h3",{attrs:{id:"内置变量"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#内置变量"}},[_._v("#")]),_._v(" 内置变量")]),_._v(" "),r("ul",[r("li",[_._v("vec4 gl_position")]),_._v(" "),r("li",[_._v("float gl_pointSize;")]),_._v(" "),r("li",[_._v("vec4 gl_FragColor;")])]),_._v(" "),r("h3",{attrs:{id:"内置函数"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#内置函数"}},[_._v("#")]),_._v(" 内置函数")]),_._v(" "),r("ul",[r("li",[r("p",[_._v("abs")]),_._v(" "),r("p",[_._v("绝对值函数")])]),_._v(" "),r("li",[r("p",[_._v("floor")]),_._v(" "),r("p",[_._v("向下取整")])]),_._v(" "),r("li",[r("p",[_._v("ceil")]),_._v(" "),r("p",[_._v("向上取整")])]),_._v(" "),r("li",[r("p",[_._v("mod")]),_._v(" "),r("p",[_._v("取模函数")])]),_._v(" "),r("li",[r("p",[_._v("clamp")]),_._v(" "),r("p",[_._v("取中间值函数")])]),_._v(" "),r("li",[r("p",[_._v("min")])]),_._v(" "),r("li",[r("p",[_._v("max")])]),_._v(" "),r("li",[r("p",[_._v("step(edge, x)")]),_._v(" "),r("p",[_._v("如果x<edge，则返回0，否则返回1.0")])]),_._v(" "),r("li",[r("p",[_._v("smoothstep(edge0, edge1, x)")]),_._v(" "),r("p",[_._v("如果x<=edge0，则返回0，如果x>=edge1，则返回1.0，如果edge0<x<edge1，则执行0~1之间的平滑差值。")])]),_._v(" "),r("li",[r("p",[_._v("mix(x, y, a)")]),_._v(" "),r("p",[_._v("返回线性混合的x和y，用公式表示为：x*(1-a)+y*a")])])]),_._v(" "),r("h2",{attrs:{id:"添加shader"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#添加shader"}},[_._v("#")]),_._v(" 添加Shader")]),_._v(" "),r("h3",{attrs:{id:"_1-glcreateprogram"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-glcreateprogram"}},[_._v("#")]),_._v(" 1.glCreateProgram")]),_._v(" "),r("h3",{attrs:{id:"_2-glattachshader"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-glattachshader"}},[_._v("#")]),_._v(" 2.glAttachShader")]),_._v(" "),r("ul",[r("li",[r("p",[_._v("glCreateShader")]),_._v(" "),r("p",[_._v("参数为GL_VERTEX_SHADER")]),_._v(" "),r("ul",[r("li",[r("p",[_._v("glShaderSource")]),_._v(" "),r("ul",[r("li",[r("p",[_._v("glCompileShader")]),_._v(" "),r("ul",[r("li",[r("p",[_._v("glGetShaderiv(shader, GL_COMPILE_STATUS, result)")]),_._v(" "),r("p",[_._v("判断编译是否成功，result为1表示成功，为0时进行下一步纠错")]),_._v(" "),r("ul",[r("li",[r("p",[_._v("glGetShaderiv(shader, GL_INFO_LOG_LENGTH, result)")]),_._v(" "),r("p",[_._v("返回值为错误原因字符串的长度，利用这个长度分配出一个buffer，然后进行下一步")]),_._v(" "),r("ul",[r("li",[r("p",[_._v("glGetShaderInfoLog")]),_._v(" "),r("p",[_._v("利用infoLog函数将错误打印出来")])])])])])])])])])])])])]),_._v(" "),r("h3",{attrs:{id:"_3-glattachshader"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-glattachshader"}},[_._v("#")]),_._v(" 3.glAttachShader")]),_._v(" "),r("ul",[r("li",[r("p",[_._v("glCreateShader")]),_._v(" "),r("p",[_._v("参数为GL_FRAGMENT_SHADER")]),_._v(" "),r("ul",[r("li",[r("p",[_._v("glShaderSource")]),_._v(" "),r("ul",[r("li",[_._v("glCompileShader")])])])])])]),_._v(" "),r("h3",{attrs:{id:"_4-gllinkprogram"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4-gllinkprogram"}},[_._v("#")]),_._v(" 4.glLinkProgram")]),_._v(" "),r("ul",[r("li",[r("p",[_._v("glGetProgramiv(program, GL_LINK_STATUS, result)")]),_._v(" "),r("p",[_._v("检查是否链接成功，1表示链接成功，0表示链接失败，进行纠错")]),_._v(" "),r("ul",[r("li",[r("p",[_._v("glGetProgramiv(program, GL_INFO_LOG_LENGTH, result)")]),_._v(" "),r("ul",[r("li",[_._v("glGetProgramInfoLog")])])])])])]),_._v(" "),r("h3",{attrs:{id:"_5-gluseprogram"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_5-gluseprogram"}},[_._v("#")]),_._v(" 5.glUseProgram")]),_._v(" "),r("h2",{attrs:{id:"eagl"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#eagl"}},[_._v("#")]),_._v(" EAGL")]),_._v(" "),r("p",[_._v("OpenGL不负责窗口管理及上下文环境管理，EAGL是在OpenGL的输出与设备的屏幕之间架接的桥梁")]),_._v(" "),r("h3",{attrs:{id:"ios平台不允许开发者使用opengl-es直接渲染屏幕-必须使用framebuffer与renderbuffer来进行渲染。若要使用eagl-则必须先创建一个renderbuffer-然后让opengl-es渲染到该renderbuffer上去-而该renderbuffer则需要绑定到一个caeagllayer上面去-这样开发者最后调用eaglcontext和presentrenderbuffer方法-就可以将渲染结果输出到屏幕上去了。"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#ios平台不允许开发者使用opengl-es直接渲染屏幕-必须使用framebuffer与renderbuffer来进行渲染。若要使用eagl-则必须先创建一个renderbuffer-然后让opengl-es渲染到该renderbuffer上去-而该renderbuffer则需要绑定到一个caeagllayer上面去-这样开发者最后调用eaglcontext和presentrenderbuffer方法-就可以将渲染结果输出到屏幕上去了。"}},[_._v("#")]),_._v(" iOS平台不允许开发者使用OpenGL ES直接渲染屏幕，必须使用FrameBuffer与RenderBuffer来进行渲染。若要使用EAGL，则必须先创建一个RenderBuffer，然后让OpenGL ES渲染到该RenderBuffer上去，而该RenderBuffer则需要绑定到一个CAEAGLLayer上面去，这样开发者最后调用EAGLContext和presentRenderBuffer方法，就可以将渲染结果输出到屏幕上去了。")]),_._v(" "),r("h2",{attrs:{id:"建立opengl到layer的连接"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#建立opengl到layer的连接"}},[_._v("#")]),_._v(" 建立OpenGL到Layer的连接")]),_._v(" "),r("h3",{attrs:{id:"_1-创建caeagllayer"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-创建caeagllayer"}},[_._v("#")]),_._v(" 1.创建CAEAGLLayer")]),_._v(" "),r("h3",{attrs:{id:"_2-构建eaglcontext-直接alloc得到-context"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-构建eaglcontext-直接alloc得到-context"}},[_._v("#")]),_._v(" 2.构建EAGLContext，直接alloc得到_context")]),_._v(" "),r("p",[_._v("在子线程中创建")]),_._v(" "),r("ul",[r("li",[_._v("将_context绑定到当前线程，即setCurrentContext:_context")])]),_._v(" "),r("h3",{attrs:{id:"_3-创建帧缓冲区"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-创建帧缓冲区"}},[_._v("#")]),_._v(" 3.创建帧缓冲区")]),_._v(" "),r("ul",[r("li",[_._v("glGenFramebuffers")])]),_._v(" "),r("h3",{attrs:{id:"_4-创建绘制缓冲区"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4-创建绘制缓冲区"}},[_._v("#")]),_._v(" 4.创建绘制缓冲区")]),_._v(" "),r("ul",[r("li",[_._v("glGenRenderbuffers")])]),_._v(" "),r("h3",{attrs:{id:"_5-绑定帧缓冲到渲染管线"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_5-绑定帧缓冲到渲染管线"}},[_._v("#")]),_._v(" 5.绑定帧缓冲到渲染管线")]),_._v(" "),r("ul",[r("li",[_._v("glBindFramebuffer(GL_FRAMEBUFFER, _FrameBuffer)")])]),_._v(" "),r("h3",{attrs:{id:"_6-绑定绘制缓冲区到渲染管线"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_6-绑定绘制缓冲区到渲染管线"}},[_._v("#")]),_._v(" 6.绑定绘制缓冲区到渲染管线")]),_._v(" "),r("ul",[r("li",[_._v("glBindRenderbuffer(GL_RENDERBUFFER, _renderbuffer)")])]),_._v(" "),r("h3",{attrs:{id:"_7-为绘制缓冲区分配存储区"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_7-为绘制缓冲区分配存储区"}},[_._v("#")]),_._v(" 7.为绘制缓冲区分配存储区")]),_._v(" "),r("p",[_._v("此处将CAEAGLLayer的绘制存储区作为绘制缓冲区的存储区")]),_._v(" "),r("ul",[r("li",[_._v("renderbufferStorage")])]),_._v(" "),r("h3",{attrs:{id:"_8-获取绘制缓冲区的像素宽度和高度"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_8-获取绘制缓冲区的像素宽度和高度"}},[_._v("#")]),_._v(" 8.获取绘制缓冲区的像素宽度和高度")]),_._v(" "),r("ul",[r("li",[_._v("glGetRenderBufferParameteriv")])]),_._v(" "),r("h3",{attrs:{id:"_9-将绘制缓冲区绑定到帧缓冲区"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_9-将绘制缓冲区绑定到帧缓冲区"}},[_._v("#")]),_._v(" 9.将绘制缓冲区绑定到帧缓冲区")]),_._v(" "),r("ul",[r("li",[_._v("glFramebufferRenderbuffer")])]),_._v(" "),r("h3",{attrs:{id:"_10-检查framebuffer的status"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_10-检查framebuffer的status"}},[_._v("#")]),_._v(" 10.检查FrameBuffer的status")]),_._v(" "),r("ul",[r("li",[_._v("glCheckFramebufferStatus")])]),_._v(" "),r("h3",{attrs:{id:"_11-在opengl绘制完一帧后进行显示"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_11-在opengl绘制完一帧后进行显示"}},[_._v("#")]),_._v(" 11.在OpenGL绘制完一帧后进行显示")]),_._v(" "),r("ul",[r("li",[_._v("presentRenderbuffer")])]),_._v(" "),r("h2",{attrs:{id:"设置坐标"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#设置坐标"}},[_._v("#")]),_._v(" 设置坐标")]),_._v(" "),r("h3",{attrs:{id:"为着色器设置物体坐标"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#为着色器设置物体坐标"}},[_._v("#")]),_._v(" 为着色器设置物体坐标")]),_._v(" "),r("ul",[r("li",[_._v("1.GLfloat vertices[] = {}")]),_._v(" "),r("li",[_._v("2.glVertexAttribPointer(mGLVertexCoords, 2, GL_FLOAT, 0, 0, vertices)")]),_._v(" "),r("li",[_._v("3.glEnableVertexAttribArry(mGLVertexCoords)")])]),_._v(" "),r("h3",{attrs:{id:"为着色器设置纹理坐标"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#为着色器设置纹理坐标"}},[_._v("#")]),_._v(" 为着色器设置纹理坐标")]),_._v(" "),r("ul",[r("li",[_._v("1.GLfloat texCoords1[] = {}")]),_._v(" "),r("li",[_._v("2.glVertexAttribPointer(mGLTextureCoords, 2, GL_FLOAT, 0, 0, texCoords1)")]),_._v(" "),r("li",[_._v("3.glEnableVertexAttribArray(mGLTextureCoords)")])]),_._v(" "),r("h2",{attrs:{id:"交错模式和平面模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#交错模式和平面模式"}},[_._v("#")]),_._v(" 交错模式和平面模式")]),_._v(" "),r("h3",{attrs:{id:"wav-pcm是交错格式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#wav-pcm是交错格式"}},[_._v("#")]),_._v(" wav/PCM是交错格式")]),_._v(" "),r("p",[r("em",[_._v("XMind - Trial Version")])])])}),[],!1,null,null,null);a.default=t.exports}}]);