(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{569:function(t,a,s){"use strict";s.r(a);var n=s(65),r=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"复习笔记"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#复习笔记"}},[t._v("#")]),t._v(" 复习笔记")]),t._v(" "),s("h2",{attrs:{id:"http"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http"}},[t._v("#")]),t._v(" HTTP")]),t._v(" "),s("p",[t._v("无连接无状态")]),t._v(" "),s("p",[t._v("GET:用于信息获取，而且应该是安全的和等幂的。"),s("br"),t._v("\n所谓安全的意味着该操作是用于获取信息而非修改信息。换句话说，GET请求一般不应产生副作用。就是说，它仅仅是获取资源信息，就像数据库查询一样，不会修改，增加数据，不会影响资源的状态。"),s("br"),t._v("\n幂等的意味着同一URL的多个请求应该返回同样的结果。"),s("br"),t._v("\nPOST：表示可能修改服务器上的资源的请求。")]),t._v(" "),s("p",[t._v("TLS过程：\n客户端向服务端发送一个消息，里面包含TLS版本号+支持的加密算法。"),s("br"),t._v("\n服务端返回一个消息，里面包含TLS版本号+服务端选择的加密算法+数字证书(包含公钥)"),s("br"),t._v("\n客户端根据自己信任的CA列表，验证服务端证书时候可信。"),s("br"),t._v("\n客户端生成一串随机数，使用公钥加密发送给服务器，随机数用于生成对称密钥。"),s("br"),t._v("\n服务端使用自己的私钥解密随机数，然后使用这串随机数生成自己的对称密钥。"),s("br"),t._v("\n客户端发送一个Finissh消息，并用对称密钥加密，里面包含这次通信的hash值。"),s("br"),t._v("\n服务端收到消息后，解密消息，计算hash值，并和传过来的hash值进行对比，如果对应，也发送一个finish消息给客户端，也使用协商好的对称密钥加密。")]),t._v(" "),s("h2",{attrs:{id:"tcp"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tcp"}},[t._v("#")]),t._v(" TCP")]),t._v(" "),s("p",[t._v("TCP提供一种面向连接的、可靠的字节流服务"),s("br"),t._v("\nTCP使用校验和，确认和重传机制来保证可靠传输"),s("br"),t._v("\nTCP给数据分节进行排序，并使用累积确认保证数据的顺序不变和非重复"),s("br"),t._v("\nTCP使用滑动窗口机制来实现流量控制，通过动态改变窗口的大小进行拥塞控制")]),t._v(" "),s("h2",{attrs:{id:"udp"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#udp"}},[t._v("#")]),t._v(" UDP")]),t._v(" "),s("p",[t._v("UDP缺乏可靠性。UDP本身不提供确认，序列号，超时重传等机制。"),s("br"),t._v("\nUDP数据报是有长度的。"),s("br"),t._v("\nUDP是无连接的。UDP客户和服务器之间不必存在长期的关系。UDP发送数据报之前也不需要经过我手创建连接的过程。"),s("br"),t._v("\nUDP支持多播和广播。")]),t._v(" "),s("h2",{attrs:{id:"webserver"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#webserver"}},[t._v("#")]),t._v(" WebServer")]),t._v(" "),s("ol",[s("li",[t._v("创建套接字")]),t._v(" "),s("li",[t._v("分配套接字地址")]),t._v(" "),s("li",[t._v("等待连接请求")]),t._v(" "),s("li",[t._v("允许连接请求")]),t._v(" "),s("li",[t._v("数据交换")]),t._v(" "),s("li",[t._v("关闭连接")])]),t._v(" "),s("h2",{attrs:{id:"哈弗曼树"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#哈弗曼树"}},[t._v("#")]),t._v(" 哈弗曼树")]),t._v(" "),s("p",[t._v("构造过程：比如一个字符串EABECDADEDE，首先我们计算每个字母的权值，A,B,C,D,E分别为：2,1,1,3,4，再通过权值构造哈弗曼树。"),s("br"),t._v("\n哈弗曼树构造出的带权路径长度总和最小。"),s("br"),t._v("\n带权路径长度：每个叶子节点的权值乘以该节点到根节点的路径长度。")]),t._v(" "),s("h2",{attrs:{id:"哈弗曼编码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#哈弗曼编码"}},[t._v("#")]),t._v(" 哈弗曼编码")]),t._v(" "),s("p",[t._v("由哈弗曼树构造出的前缀编码为哈夫曼编码。")]),t._v(" "),s("h2",{attrs:{id:"树的度和阶"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#树的度和阶"}},[t._v("#")]),t._v(" 树的度和阶")]),t._v(" "),s("p",[t._v("度数：在树中，每个节点的子节点(子树)的个数就称为该节点的度。")]),t._v(" "),s("p",[t._v("阶数：定义为一个节点的子节点数目的最大值。")]),t._v(" "),s("h2",{attrs:{id:"数据库索引"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数据库索引"}},[t._v("#")]),t._v(" 数据库索引")]),t._v(" "),s("p",[t._v("一个索引是存储的表中一个特定列的值数据结构(最常见的是B-Tree)。索引是在表的列上创建。所以，要记住的关键点是索引包含一个表中列的值，并且这些值存储在一个数据结构中。请记住这一点：索引是一种数据结构。")]),t._v(" "),s("p",[t._v("什么样的数据结构可以作为索引？"),s("br"),t._v("\nB-Tree是最常用的用于索引的数据结构。因为他们是时间复杂度低，查找、删除、插入操作都可以在对数时间内完成。另一一个重要原因存储在B-Tree中的数据是有序的。"),s("br"),t._v("\n哈希表是另外一种你可能看到用作索引的数据结构-这些索引通常被称为哈希索引。使用哈希索引的原因是，在寻找值时哈希表效率极高。所以如果使用哈希索引，对于比较字符串是否相等的查找能够极快的检索出值。哈希索引的工作方式是将列的值作为索引的键值(key)，和键值相对应实际的值(value)是指向该表中相应行的指针。"),s("br"),t._v("\n哈希索引的缺点："),s("br"),t._v("\n哈希表是无顺序的数据结构，对于很多类型的查询语句哈希索引都无能为力。举例来说，加入你想要找出所有小于40岁的员工。你怎么使用哈希索引进行查询？这不可行，因为哈希表只适合查询键值对-也就是说查询相等的查询。")]),t._v(" "),s("h2",{attrs:{id:"dijkstra单源最短路径算法和prim最小生成树算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dijkstra单源最短路径算法和prim最小生成树算法"}},[t._v("#")]),t._v(" Dijkstra单源最短路径算法和Prim最小生成树算法")]),t._v(" "),s("h2",{attrs:{id:"算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#算法"}},[t._v("#")]),t._v(" 算法")]),t._v(" "),s("p",[t._v("求最大子序列的和：")]),t._v(" "),s("div",{staticClass:"language-C extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("MaxSubsequenceSum")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" A"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" N"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" ThisSum"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" MaxSum"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    ThisSum "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" MaxSum "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("j "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" N"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        ThisSum "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" A"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ThisSum "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" MaxSum"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            MaxSum "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ThisSum"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ThisSum "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            ThisSum "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" MaxSum"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("对数时间的一般法则：如果一个算法用常数O(1)将问题的大小削减为其一部分(通常是1/2)，那么该算法就是O(logN)。另一方面，如果使用常数时间只是把问题减少一个常数(如将问题减少1)，那么这种算法就是O(N)的。")]),t._v(" "),s("p",[t._v("折半查找：")]),t._v(" "),s("div",{staticClass:"language-C extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("BinarySearch")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" A"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" N"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" Low"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Mid"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" High"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    Low "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    High "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" N "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Low "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" High"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        Mid "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Low "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" High"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("A"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Mid"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            Low "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Mid "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("A"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Mid"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            High "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Mid "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" Mid"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h2",{attrs:{id:"avl树的旋转和伸展树的旋转"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#avl树的旋转和伸展树的旋转"}},[t._v("#")]),t._v(" AVL树的旋转和伸展树的旋转")]),t._v(" "),s("p",[t._v("AVL树的旋转是先旋转子树，再旋转父节点。")]),t._v(" "),s("p",[t._v("LL型：向右旋转一次"),s("br"),t._v("\nRR型：向左旋转一次"),s("br"),t._v("\nLR型：先向左旋转子树，再向右旋转父节点"),s("br"),t._v("\nRL型：先向右旋转子树，再向左旋转父节点")]),t._v(" "),s("p",[t._v("伸展树的旋转不同，对于zig-zag和zag-zig情形和AVL树一致，对于zig-zig和zag-zag情形是先旋转父节点，再旋转子树。")]),t._v(" "),s("p",[t._v("zig-zig:先向右旋转父节点，再向右旋转子树"),s("br"),t._v("\nzag-zag:先向左旋转父节点，再向左旋转子树"),s("br"),t._v("\nzig-zag:和LR旋转一致"),s("br"),t._v("\nzag-zig:和RL旋转一致")]),t._v(" "),s("h2",{attrs:{id:"b-树"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#b-树"}},[t._v("#")]),t._v(" B-树")]),t._v(" "),s("p",[t._v("M阶：每个节点至多可以拥有M个子节点。"),s("br"),t._v("\nB-树特性："),s("br"),t._v("\n树的根或者是一片叶子，其儿子数在2和M之间。"),s("br"),t._v("\n中间节点的儿子树在M/2和M之间。"),s("br"),t._v("\n所有的树叶都有相同的深度。")]),t._v(" "),s("h2",{attrs:{id:"优先队列"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#优先队列"}},[t._v("#")]),t._v(" 优先队列")]),t._v(" "),s("h3",{attrs:{id:"二叉堆"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二叉堆"}},[t._v("#")]),t._v(" 二叉堆")]),t._v(" "),s("p",[t._v("二叉堆是一颗完全二叉树")]),t._v(" "),s("h3",{attrs:{id:"d-堆"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#d-堆"}},[t._v("#")]),t._v(" d-堆")]),t._v(" "),s("h3",{attrs:{id:"左式堆"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#左式堆"}},[t._v("#")]),t._v(" 左式堆")]),t._v(" "),s("p",[t._v("左式堆是有堆序性的二叉树。换言之它并非一定是完全二叉树，而二叉堆是一颗完成二叉树。\n对于堆中的每一个节点X，左儿子的零路径长度至少与有儿子的零路径长一样大。"),s("br"),t._v("\n左式堆合并原则：将较大根的堆合并到较小根的堆的右子树。如果较小根的堆右子树上不为空，则需取子堆进行比较。最后直到较小堆的右子树为空时，将较大堆合并到较小堆的右子树上。如果左儿子的零路径长度比有儿子零路径长度小，则交换左右孩子。")]),t._v(" "),s("h2",{attrs:{id:"斜堆"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#斜堆"}},[t._v("#")]),t._v(" 斜堆")]),t._v(" "),s("p",[t._v("斜堆是具有堆序的二叉树。")]),t._v(" "),s("h2",{attrs:{id:"二项队列"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二项队列"}},[t._v("#")]),t._v(" 二项队列")])])}),[],!1,null,null,null);a.default=r.exports}}]);