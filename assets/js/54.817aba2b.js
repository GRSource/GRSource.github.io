(window.webpackJsonp=window.webpackJsonp||[]).push([[54],{597:function(_,v,a){"use strict";a.r(v);var t=a(65),r=Object(t.a)({},(function(){var _=this,v=_.$createElement,a=_._self._c||v;return a("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[a("h1",{attrs:{id:"opengl相关概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#opengl相关概念"}},[_._v("#")]),_._v(" OpenGL相关概念")]),_._v(" "),a("h2",{attrs:{id:"_3d图形与opengl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3d图形与opengl"}},[_._v("#")]),_._v(" 3D图形与OpenGL")]),_._v(" "),a("h3",{attrs:{id:"_3d图形技术术语"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3d图形技术术语"}},[_._v("#")]),_._v(" 3D图形技术术语")]),_._v(" "),a("ul",[a("li",[a("p",[_._v("投影矩阵")]),_._v(" "),a("p",[_._v("用于将3D坐标转换成二维屏幕坐标")])]),_._v(" "),a("li",[a("p",[_._v("变换矩阵")])]),_._v(" "),a("li",[a("p",[_._v("着色")]),_._v(" "),a("p",[_._v("通过沿着表面(在顶点之间)改变颜色值，能够轻松创建光纤照射在一个红色立方体的效果。")])]),_._v(" "),a("li",[a("p",[_._v("纹理")]),_._v(" "),a("p",[_._v("一个纹理不过是一副用来贴倒三角形或多边形的图片")])]),_._v(" "),a("li",[a("p",[_._v("视口")]),_._v(" "),a("p",[_._v("裁剪区域(个人理解为绘制的区域)的宽高很少正好与窗口的宽高相匹配。因此坐标系统必须从逻辑坐标映射到物理屏幕像素坐标。")])])]),_._v(" "),a("h3",{attrs:{id:"_3d图形常见用途"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3d图形常见用途"}},[_._v("#")]),_._v(" 3D图形常见用途")]),_._v(" "),a("ul",[a("li",[a("p",[_._v("实时3D")]),_._v(" "),a("p",[_._v("实时3D图像是指惠东的并与用户进行交互的图像")])]),_._v(" "),a("li",[a("p",[_._v("非实时3D")]),_._v(" "),a("p",[_._v("非交互性的")])]),_._v(" "),a("li",[a("p",[_._v("着色器")])])]),_._v(" "),a("h3",{attrs:{id:"_3d编程基本原则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3d编程基本原则"}},[_._v("#")]),_._v(" 3D编程基本原则")]),_._v(" "),a("ul",[a("li",[a("p",[_._v("投影")]),_._v(" "),a("p",[_._v("用于创建集合图像的3D坐标将投影到一个2D表面")])])]),_._v(" "),a("h2",{attrs:{id:"缓冲区"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缓冲区"}},[_._v("#")]),_._v(" 缓冲区")]),_._v(" "),a("h3",{attrs:{id:"深度缓冲区"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#深度缓冲区"}},[_._v("#")]),_._v(" 深度缓冲区")]),_._v(" "),a("p",[_._v("存储每个像素的深度值，当启动深度测试时，片段像素深度值和深度缓冲区深度值进行比较，决定片段哪些像素点数据可以替换到颜色缓冲区中。")]),_._v(" "),a("h3",{attrs:{id:"模板缓冲区"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#模板缓冲区"}},[_._v("#")]),_._v(" 模板缓冲区")]),_._v(" "),a("p",[_._v("模板缓冲区可以为屏幕上的每个像素点保存一个无符号整数值。这个值的具体意义视程序的具体应用而定。在渲染的过程中，可以用这个值与一个预先设定的参考值相比较，根据比较的结果来决定是否更新相应的像素点的颜色。")]),_._v(" "),a("h3",{attrs:{id:"颜色缓冲区"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#颜色缓冲区"}},[_._v("#")]),_._v(" 颜色缓冲区")]),_._v(" "),a("p",[_._v("用于绘图的缓冲区，它包含了颜色索引或者RGBA颜色数据")]),_._v(" "),a("h3",{attrs:{id:"累积缓冲区"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#累积缓冲区"}},[_._v("#")]),_._v(" 累积缓冲区")]),_._v(" "),a("p",[_._v("累积缓冲区允许你把渲染到颜色缓冲区的值，拷贝到累积缓冲区。在多次拷贝操作到累积缓冲区时，可以用不同方式的把颜色缓冲区内容和当前累积缓冲区的内容进行重复混合")]),_._v(" "),a("h2",{attrs:{id:"图元"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#图元"}},[_._v("#")]),_._v(" 图元")]),_._v(" "),a("p",[_._v("图元就是组成图像的基本单元，比如三维模型中的点、线、面等等。OpenGL中的图元只不过是顶点的集合以预定义的方式结合在一起罢了。例如，一个单独的点就是一个图元。")]),_._v(" "),a("h2",{attrs:{id:"片元"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#片元"}},[_._v("#")]),_._v(" 片元")]),_._v(" "),a("p",[_._v("片元就是以后的像素点，它比像素多一些位置、法向量等属性")]),_._v(" "),a("h2",{attrs:{id:"着色器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#着色器"}},[_._v("#")]),_._v(" 着色器")]),_._v(" "),a("h3",{attrs:{id:"顶点着色器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#顶点着色器"}},[_._v("#")]),_._v(" 顶点着色器")]),_._v(" "),a("ul",[a("li",[a("p",[_._v("输入")]),_._v(" "),a("ul",[a("li",[a("p",[_._v("Attributes")]),_._v(" "),a("p",[_._v("不相同的变量，如位置、颜色等")])]),_._v(" "),a("li",[a("p",[_._v("Uniforms")]),_._v(" "),a("p",[_._v("顶点着色器使用的常量数据，不能被着色器修改，一般用于对同一组顶点组成的单个3D物体中所有顶点都相同的变量，如当前光源的位置。")])]),_._v(" "),a("li",[a("p",[_._v("Samplers")]),_._v(" "),a("p",[_._v("这个是可选的，一种特殊的uniforms，表示顶点着色器使用的纹理。")])]),_._v(" "),a("li",[a("p",[_._v("Shader program")]),_._v(" "),a("p",[_._v("顶点着色器的源码或可执行文件，描述了将对顶点执行的操作。")])])])]),_._v(" "),a("li",[a("p",[_._v("输出")]),_._v(" "),a("p",[_._v("输出主要为经过顶点着色器生成的varying变量及一些内建输出变量。")]),_._v(" "),a("ul",[a("li",[_._v("Varying")])])])]),_._v(" "),a("h3",{attrs:{id:"片元着色器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#片元着色器"}},[_._v("#")]),_._v(" 片元着色器")]),_._v(" "),a("p",[_._v("片元着色器是用于处理片元值及相关数据的可编程单元，其可以执行纹理的采样，颜色的汇总，计算雾颜色等操作。片元着色器主要功能为通过重复执行（每片元一次）将3D物体中的图元光栅化后产生的每个片元的颜色等属性计算出来送入后继阶段；")]),_._v(" "),a("ul",[a("li",[a("p",[_._v("输入")]),_._v(" "),a("ul",[a("li",[a("p",[_._v("Varying variables")]),_._v(" "),a("p",[_._v("顶点着色器输出的varying变量经过光栅化插值计算后产生的作用于每个片元的值。")])]),_._v(" "),a("li",[a("p",[_._v("Uniforms")]),_._v(" "),a("p",[_._v("片元着色器使用的常量数据")])]),_._v(" "),a("li",[a("p",[_._v("Samplers")]),_._v(" "),a("p",[_._v("一种特殊的uniforms，表示片元着色器使用的纹理。")])]),_._v(" "),a("li",[a("p",[_._v("Shader program")]),_._v(" "),a("p",[_._v("片元着色器的源码或可执行文件，描述了将对片元执行的操作。")])])])]),_._v(" "),a("li",[a("p",[_._v("输出")])])]),_._v(" "),a("h2",{attrs:{id:"光栅化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#光栅化"}},[_._v("#")]),_._v(" 光栅化")]),_._v(" "),a("p",[_._v("光栅化阶段把图元转换成片元集合，之后会提交给片元着色器处理，这些片元集合表示可以被绘制到屏幕的像素")]),_._v(" "),a("h2",{attrs:{id:"gl-filter-mipmap-selector"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gl-filter-mipmap-selector"}},[_._v("#")]),_._v(" GL_FILTER_MIPMAP_SELECTOR")]),_._v(" "),a("p",[_._v("GL_NEAREST_MIPMAP_LINEAR模式，它的SELECTOR是GL_LINEAR，它会在两个最邻近的mip层中执行线性插值，然后得出的结果又由被选择的过滤器GL_NEAREST进行过滤。\n其中GL_NEAREST_MIPMAP_NEAAREST具有很好的性能，也能够解决闪烁的问题，但在视觉效果上会比较差。其中GL_LINEAR_MIPMAP_NEAREST常用于游戏加速，使用了质量较高的线性过滤，和快速的选择的方式(最邻近方式）。")]),_._v(" "),a("h3",{attrs:{id:"filter"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#filter"}},[_._v("#")]),_._v(" FILTER")]),_._v(" "),a("p",[_._v("指定纹理过滤方式")]),_._v(" "),a("h3",{attrs:{id:"selector"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#selector"}},[_._v("#")]),_._v(" SELECTOR")]),_._v(" "),a("p",[_._v("指定选择哪个mipmap层")]),_._v(" "),a("p",[a("em",[_._v("XMind - Trial Version")])])])}),[],!1,null,null,null);v.default=r.exports}}]);